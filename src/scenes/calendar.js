const { Scenes } = require('telegraf');
const { Markup } = require('telegraf');
const moment = require('moment-timezone');
const { Post } = require('../models/post');
const postService = require('../services/postService');
const { AdPost } = require('../models/adPost');
const adPostService = require('../services/adPostService');

const calendarScene = new Scenes.WizardScene(
  'calendar',
  // –®–∞–≥ 1: –ü–æ–∫–∞–∑ –∫–∞–ª–µ–Ω–¥–∞—Ä—è —Å –≤—ã–±–æ—Ä–æ–º —Ç–∏–ø–∞ –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º—ã—Ö –ø–æ—Å—Ç–æ–≤
  async (ctx) => {
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç–µ–∫—É—â–µ–≥–æ –º–µ—Å—è—Ü–∞, –µ—Å–ª–∏ –Ω–µ –∑–∞–¥–∞–Ω
    if (!ctx.session.currentMonth) {
      ctx.session.currentMonth = moment().tz(ctx.session.user?.timezone || 'Europe/Moscow');
    } else {
      // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å—Ç—Ä–æ–∫—É –æ–±—Ä–∞—Ç–Ω–æ –≤ –æ–±—ä–µ–∫—Ç moment
      ctx.session.currentMonth = moment(ctx.session.currentMonth).tz(ctx.session.user?.timezone || 'Europe/Moscow');
    }
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ñ–∏–ª—å—Ç—Ä–∞ —Ç–∏–ø–æ–≤ –ø–æ—Å—Ç–æ–≤, –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ
    if (!ctx.session.postFilter) {
      ctx.session.postFilter = 'all';
    }
    
    const currentMonth = ctx.session.currentMonth;
    const monthStart = currentMonth.clone().startOf('month');
    const monthEnd = currentMonth.clone().endOf('month');
    
    // –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç–Ω—ã–µ –ø–æ—Å—Ç—ã –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    const contentPosts = await Post.find({
      userId: ctx.from.id,
      scheduleTime: {
        $gte: monthStart.toDate(),
        $lte: monthEnd.toDate()
      },
      status: { $ne: 'deleted' }
    }).sort({ scheduleTime: 1 });
    
    // –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∫–ª–∞–º–Ω—ã–µ –ø–æ—Å—Ç—ã
    const adPosts = await AdPost.find({
      userId: ctx.from.id,
      startDate: { $lte: monthEnd.toDate() },
      endDate: { $gte: monthStart.toDate() },
      status: { $in: ['active', 'scheduled', 'pending'] }
    }).sort({ startDate: 1 });
    
    // –û–±—ä–µ–¥–∏–Ω—è–µ–º –∏ —Ñ–∏–ª—å—Ç—Ä—É–µ–º –ø–æ—Å—Ç—ã —Å–æ–≥–ª–∞—Å–Ω–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º—É —Ñ–∏–ª—å—Ç—Ä—É
    let allPosts = [];
    
    if (ctx.session.postFilter === 'all' || ctx.session.postFilter === 'content') {
      // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç–Ω—ã–µ –ø–æ—Å—Ç—ã –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ –∫–∞–ª–µ–Ω–¥–∞—Ä–µ
      allPosts = allPosts.concat(contentPosts.map(post => ({
        _id: post._id,
        date: moment(post.scheduleTime),
        type: 'content',
        status: post.status,
        title: truncateText(post.content.text || '–ú–µ–¥–∏–∞ –∫–æ–Ω—Ç–µ–Ω—Ç', 30),
        channelId: post.channelId
      })));
    }
    
    if (ctx.session.postFilter === 'all' || ctx.session.postFilter === 'ad') {
      // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —Ä–µ–∫–ª–∞–º–Ω—ã–µ –ø–æ—Å—Ç—ã –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ –∫–∞–ª–µ–Ω–¥–∞—Ä–µ
      allPosts = allPosts.concat(adPosts.map(post => ({
        _id: post._id,
        date: moment(post.startDate), // –∏—Å–ø–æ–ª—å–∑—É–µ–º –¥–∞—Ç—É –Ω–∞—á–∞–ª–∞ –¥–ª—è —Ä–µ–∫–ª–∞–º–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤
        type: 'ad',
        status: post.status,
        title: truncateText(post.content || '–†–µ–∫–ª–∞–º–Ω—ã–π –ø–æ—Å—Ç', 30),
        budget: post.budget
      })));
    }
    
    // –°–æ–∑–¥–∞–µ–º –∫–∞–ª–µ–Ω–¥–∞—Ä—å
    const calendar = generateCalendar(currentMonth, allPosts);
    
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–µ–∫—Å—Ç –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ —Ñ–∏–ª—å—Ç—Ä–∞
    let filterText = '';
    switch(ctx.session.postFilter) {
      case 'all': filterText = '–í—Å–µ –ø–æ—Å—Ç—ã'; break;
      case 'content': filterText = '–ö–æ–Ω—Ç–µ–Ω—Ç–Ω—ã–µ –ø–æ—Å—Ç—ã'; break;
      case 'ad': filterText = '–†–µ–∫–ª–∞–º–Ω—ã–µ –ø–æ—Å—Ç—ã'; break;
    }
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–ª–µ–Ω–¥–∞—Ä—å
    await ctx.reply(
      `üìÖ –ö–∞–ª–µ–Ω–¥–∞—Ä—å –Ω–∞ ${currentMonth.format('MMMM YYYY')}\nüìå –§–∏–ª—å—Ç—Ä: ${filterText}\n\n${calendar}`,
      Markup.keyboard([
        ['‚¨ÖÔ∏è –ü—Ä–µ–¥—ã–¥—É—â–∏–π –º–µ—Å—è—Ü', '‚û°Ô∏è –°–ª–µ–¥—É—é—â–∏–π –º–µ—Å—è—Ü'],
        ['üìÑ –ö–æ–Ω—Ç–µ–Ω—Ç–Ω—ã–µ –ø–æ—Å—Ç—ã', 'üì£ –†–µ–∫–ª–∞–º–Ω—ã–µ –ø–æ—Å—Ç—ã', 'üîÑ –í—Å–µ –ø–æ—Å—Ç—ã'],
        ['üìù –î–æ–±–∞–≤–∏—Ç—å –ø–æ—Å—Ç', 'üîô –ù–∞–∑–∞–¥']
      ]).resize()
    );
    
    return ctx.wizard.next();
  },
  // –®–∞–≥ 2: –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–µ–π—Å—Ç–≤–∏–π —Å –∫–∞–ª–µ–Ω–¥–∞—Ä–µ–º
  async (ctx) => {
    try {
      if (ctx.message.text === 'üîô –ù–∞–∑–∞–¥') {
        return ctx.scene.leave();
      } else if (ctx.message.text === 'üìù –î–æ–±–∞–≤–∏—Ç—å –ø–æ—Å—Ç') {
        return ctx.scene.enter('posting');
      } else if (ctx.message.text === '‚¨ÖÔ∏è –ü—Ä–µ–¥—ã–¥—É—â–∏–π –º–µ—Å—è—Ü') {
        ctx.session.currentMonth = ctx.session.currentMonth.subtract(1, 'month');
        return ctx.wizard.selectStep(0);
      } else if (ctx.message.text === '‚û°Ô∏è –°–ª–µ–¥—É—é—â–∏–π –º–µ—Å—è—Ü') {
        ctx.session.currentMonth = ctx.session.currentMonth.add(1, 'month');
        return ctx.wizard.selectStep(0);
      } else if (ctx.message.text === 'üìÑ –ö–æ–Ω—Ç–µ–Ω—Ç–Ω—ã–µ –ø–æ—Å—Ç—ã') {
        ctx.session.postFilter = 'content';
        return ctx.wizard.selectStep(0);
      } else if (ctx.message.text === 'üì£ –†–µ–∫–ª–∞–º–Ω—ã–µ –ø–æ—Å—Ç—ã') {
        ctx.session.postFilter = 'ad';
        return ctx.wizard.selectStep(0);
      } else if (ctx.message.text === 'üîÑ –í—Å–µ –ø–æ—Å—Ç—ã') {
        ctx.session.postFilter = 'all';
        return ctx.wizard.selectStep(0);
      } else if (ctx.message.text.match(/^\d{1,2}$/)) {
        // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª –¥–µ–Ω—å –º–µ—Å—è—Ü–∞
        const day = parseInt(ctx.message.text);
        const currentMonth = ctx.session.currentMonth;
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –¥–µ–Ω—å —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ —Ç–µ–∫—É—â–µ–º –º–µ—Å—è—Ü–µ
        if (day < 1 || day > currentMonth.daysInMonth()) {
          await ctx.reply('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –¥–µ–Ω—å –º–µ—Å—è—Ü–∞.');
          return ctx.wizard.selectStep(1);
        }
        
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π –¥–µ–Ω—å
        const selectedDate = currentMonth.clone().date(day);
        
        // –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å—Ç—ã –Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω—É—é –¥–∞—Ç—É
        const startOfDay = selectedDate.clone().startOf('day');
        const endOfDay = selectedDate.clone().endOf('day');
        
        // –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç–Ω—ã–µ –ø–æ—Å—Ç—ã –Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω—É—é –¥–∞—Ç—É
        const contentPosts = await Post.find({
          userId: ctx.from.id,
          scheduleTime: {
            $gte: startOfDay.toDate(),
            $lte: endOfDay.toDate()
          },
          status: { $ne: 'deleted' }
        }).sort({ scheduleTime: 1 });
        
        // –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∫–ª–∞–º–Ω—ã–µ –ø–æ—Å—Ç—ã, –∞–∫—Ç–∏–≤–Ω—ã–µ –≤ –≤—ã–±—Ä–∞–Ω–Ω—É—é –¥–∞—Ç—É
        const adPosts = await AdPost.find({
          userId: ctx.from.id,
          startDate: { $lte: endOfDay.toDate() },
          endDate: { $gte: startOfDay.toDate() },
          status: { $in: ['active', 'scheduled', 'pending'] }
        }).sort({ startDate: 1 });
        
        // –û–±—ä–µ–¥–∏–Ω—è–µ–º –∏ —Ñ–∏–ª—å—Ç—Ä—É–µ–º –ø–æ—Å—Ç—ã —Å–æ–≥–ª–∞—Å–Ω–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º—É —Ñ–∏–ª—å—Ç—Ä—É
        let postsToShow = [];
        
        if (ctx.session.postFilter === 'all' || ctx.session.postFilter === 'content') {
          postsToShow = postsToShow.concat(contentPosts.map(post => ({
            _id: post._id,
            time: moment(post.scheduleTime).format('HH:mm'),
            type: 'content',
            status: post.status,
            title: post.content.text || '–ú–µ–¥–∏–∞ –∫–æ–Ω—Ç–µ–Ω—Ç',
            channelId: post.channelId instanceof Array ? post.channelId.join(', ') : post.channelId,
            original: post
          })));
        }
        
        if (ctx.session.postFilter === 'all' || ctx.session.postFilter === 'ad') {
          postsToShow = postsToShow.concat(adPosts.map(post => ({
            _id: post._id,
            time: moment(post.startDate).format('HH:mm'),
            type: 'ad',
            status: post.status,
            title: post.content || '–†–µ–∫–ª–∞–º–Ω—ã–π –ø–æ—Å—Ç',
            budget: post.budget,
            original: post
          })));
        }
        
        if (postsToShow.length === 0) {
          await ctx.reply(
            `–ù–∞ ${selectedDate.format('DD.MM.YYYY')} –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤ –Ω–µ—Ç.`,
            Markup.keyboard([
              ['üìù –î–æ–±–∞–≤–∏—Ç—å –ø–æ—Å—Ç –Ω–∞ —ç—Ç—É –¥–∞—Ç—É'],
              ['üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –∫–∞–ª–µ–Ω–¥–∞—Ä—é']
            ]).resize()
          );
          
          ctx.session.selectedDate = selectedDate.format();
          ctx.session.action = 'add_post';
          return ctx.wizard.next();
        } else {
          // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ—Å—Ç–æ–≤ –Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω—É—é –¥–∞—Ç—É
          let message = `üìÖ –ü–æ—Å—Ç—ã –Ω–∞ ${selectedDate.format('DD.MM.YYYY')}:\n\n`;
          
          postsToShow.forEach((post, index) => {
            const icon = post.type === 'content' ? 'üìÑ' : 'üì£';
            const status = getStatusEmoji(post.status);
            message += `${index + 1}. ${icon} ${post.time} ${status} - ${truncateText(post.title, 30)}\n`;
          });
          
          // –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –ø–æ—Å—Ç–∞–º–∏
          const keyboard = [];
          postsToShow.forEach((post, index) => {
            const icon = post.type === 'content' ? 'üìÑ' : 'üì£';
            const status = getStatusEmoji(post.status);
            keyboard.push([Markup.button.callback(
              `${index + 1}. ${icon} ${post.time} ${status} - ${truncateText(post.title, 25)}`,
              `post_${post.type}_${post._id}`
            )]);
          });
          
          keyboard.push([Markup.button.callback('üìù –î–æ–±–∞–≤–∏—Ç—å –ø–æ—Å—Ç', 'add_post')]);
          keyboard.push([Markup.button.callback('üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –∫–∞–ª–µ–Ω–¥–∞—Ä—é', 'back_to_calendar')]);
          
          await ctx.reply(
            message,
            Markup.inlineKeyboard(keyboard)
          );
          
          ctx.session.selectedDate = selectedDate.format();
          ctx.session.postsForDate = postsToShow; // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ —Å–ª–µ–¥—É—é—â–µ–º —à–∞–≥–µ
          return ctx.wizard.next();
        }
      } else {
        await ctx.reply('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–Ω—å –º–µ—Å—è—Ü–∞ –∏–ª–∏ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é.');
        return ctx.wizard.selectStep(1);
      }
    } catch (error) {
      console.error('Error handling calendar action:', error);
      await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–µ–π—Å—Ç–≤–∏—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.');
      return ctx.wizard.selectStep(0);
    }
  },
  // –®–∞–≥ 3: –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –ø–æ—Å—Ç–∞ –∏–ª–∏ –¥–µ–π—Å—Ç–≤–∏—è
  async (ctx) => {
    if (ctx.callbackQuery) {
      if (ctx.callbackQuery.data === 'back_to_calendar') {
        return ctx.wizard.selectStep(0);
      } else if (ctx.callbackQuery.data === 'add_post') {
        ctx.session.action = 'add_post';
        return ctx.scene.enter('posting', { date: ctx.session.selectedDate });
      } else if (ctx.callbackQuery.data.startsWith('post_')) {
        const [, postType, postId] = ctx.callbackQuery.data.split('_');
        
        try {
          let post;
          if (postType === 'content') {
            post = await postService.getPostById(postId, ctx.from.id);
          } else if (postType === 'ad') {
            post = await adPostService.getAdPostById(postId, ctx.from.id);
          }
          
          if (!post) {
            await ctx.reply('–ü–æ—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.');
            return ctx.wizard.selectStep(0);
          }
          
          // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–µ—Ç–∞–ª–∏ –ø–æ—Å—Ç–∞ –∏ –¥–µ–π—Å—Ç–≤–∏—è
          let message = '';
          let keyboard = [];
          
          if (postType === 'content') {
            const postTime = moment(post.scheduleTime).format('DD.MM.YYYY HH:mm');
            message = `üìÑ <b>–ö–æ–Ω—Ç–µ–Ω—Ç–Ω—ã–π –ø–æ—Å—Ç –Ω–∞ ${postTime}</b>\n\n`;
            
            if (post.channelId instanceof Array) {
              message += `<b>–ö–∞–Ω–∞–ª—ã:</b> ${post.channelId.join(', ')}\n`;
            } else {
              message += `<b>–ö–∞–Ω–∞–ª:</b> ${post.channelId}\n`;
            }
            
            message += `<b>–°—Ç–∞—Ç—É—Å:</b> ${getStatusEmoji(post.status)} ${getStatusText(post.status)}\n\n`;
            
            if (post.content.text) {
              message += `<b>–°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ:</b>\n${post.content.text.substring(0, 200)}${post.content.text.length > 200 ? '...' : ''}\n\n`;
            } else if (post.content.photo) {
              message += `<b>–°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ:</b> –§–æ—Ç–æ —Å –ø–æ–¥–ø–∏—Å—å—é\n\n`;
            } else if (post.content.video) {
              message += `<b>–°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ:</b> –í–∏–¥–µ–æ —Å –ø–æ–¥–ø–∏—Å—å—é\n\n`;
            } else {
              message += `<b>–°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ:</b> –ú–µ–¥–∏–∞ –∫–æ–Ω—Ç–µ–Ω—Ç\n\n`;
            }
            
            if (post.tags && post.tags.length > 0) {
              message += `<b>–ú–µ—Ç–∫–∏:</b> ${post.tags.join(', ')}\n`;
            }
            
            keyboard = [
              [Markup.button.callback('‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ—Å—Ç', `edit_content_${post._id}`)],
              [Markup.button.callback('üóë –£–¥–∞–ª–∏—Ç—å –ø–æ—Å—Ç', `delete_content_${post._id}`)],
              [Markup.button.callback('üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ —Å–ø–∏—Å–∫—É –ø–æ—Å—Ç–æ–≤', `back_to_posts`)]
            ];
          } else if (postType === 'ad') {
            const startDate = moment(post.startDate).format('DD.MM.YYYY');
            const endDate = moment(post.endDate).format('DD.MM.YYYY');
            
            message = `üì£ <b>–†–µ–∫–ª–∞–º–Ω—ã–π –ø–æ—Å—Ç</b>\n\n`;
            message += `<b>–ü–µ—Ä–∏–æ–¥:</b> ${startDate} - ${endDate}\n`;
            message += `<b>–ë—é–¥–∂–µ—Ç:</b> ${post.budget} —Ä—É–±.\n`;
            message += `<b>–°—Ç–∞—Ç—É—Å:</b> ${getStatusEmoji(post.status)} ${getStatusText(post.status)}\n\n`;
            
            if (post.content) {
              message += `<b>–°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ:</b>\n${post.content.substring(0, 200)}${post.content.length > 200 ? '...' : ''}\n\n`;
            }
            
            if (post.targetCategories && post.targetCategories.length > 0) {
              message += `<b>–¶–µ–ª–µ–≤—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:</b> ${post.targetCategories.join(', ')}\n`;
            }
            
            if (post.keywords && post.keywords.length > 0) {
              message += `<b>–ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞:</b> ${post.keywords.join(', ')}\n`;
            }
            
            keyboard = [
              [Markup.button.callback('‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ—Å—Ç', `edit_ad_${post._id}`)],
              [Markup.button.callback('üóë –£–¥–∞–ª–∏—Ç—å –ø–æ—Å—Ç', `delete_ad_${post._id}`)],
              [Markup.button.callback('üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', `stats_ad_${post._id}`)],
              [Markup.button.callback('üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ —Å–ø–∏—Å–∫—É –ø–æ—Å—Ç–æ–≤', `back_to_posts`)]
            ];
          }
          
          await ctx.reply(message, {
            parse_mode: 'HTML',
            reply_markup: Markup.inlineKeyboard(keyboard)
          });
          
          ctx.session.selectedPostId = postId;
          ctx.session.selectedPostType = postType;
          return ctx.wizard.next();
        } catch (error) {
          console.error('Error getting post details:', error);
          await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ—Å—Ç–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.');
          return ctx.wizard.selectStep(0);
        }
      }
    } else if (ctx.message.text === 'üìù –î–æ–±–∞–≤–∏—Ç—å –ø–æ—Å—Ç –Ω–∞ —ç—Ç—É –¥–∞—Ç—É') {
      ctx.session.action = 'add_post';
      return ctx.scene.enter('posting', { date: ctx.session.selectedDate });
    } else if (ctx.message.text === 'üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –∫–∞–ª–µ–Ω–¥–∞—Ä—é') {
      return ctx.wizard.selectStep(0);
    } else {
      await ctx.reply('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é.');
      return ctx.wizard.selectStep(2);
    }
  },
  // –®–∞–≥ 4: –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–µ–π—Å—Ç–≤–∏–π —Å –≤—ã–±—Ä–∞–Ω–Ω—ã–º –ø–æ—Å—Ç–æ–º
  async (ctx) => {
    if (ctx.callbackQuery) {
      const action = ctx.callbackQuery.data;
      
      if (action === 'back_to_posts') {
        // –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —Å–ø–∏—Å–∫—É –ø–æ—Å—Ç–æ–≤ –Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω—É—é –¥–∞—Ç—É
        return ctx.wizard.selectStep(2);
      } else if (action === 'back_to_calendar') {
        return ctx.wizard.selectStep(0);
      } else if (action.startsWith('edit_')) {
        const [, postType, postId] = action.split('_');
        
        if (postType === 'content') {
          return ctx.scene.enter('posting', { postId, edit: true });
        } else if (postType === 'ad') {
          // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ —Å—Ü–µ–Ω—É —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–µ–∫–ª–∞–º–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤
          // –ï—Å–ª–∏ —Ç–∞–∫–æ–π —Å—Ü–µ–Ω—ã –Ω–µ—Ç, —Å–æ–∑–¥–∞–π—Ç–µ –µ–µ –∏–ª–∏ –∞–¥–∞–ø—Ç–∏—Ä—É–π—Ç–µ —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é
          await ctx.reply(
            '–ü–µ—Ä–µ—Ö–æ–¥ –∫ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—é —Ä–µ–∫–ª–∞–º–Ω–æ–≥–æ –ø–æ—Å—Ç–∞...',
            Markup.removeKeyboard()
          );
          return ctx.scene.enter('purchases', { action: 'edit_ad', postId });
        }
      } else if (action.startsWith('delete_')) {
        const [, postType, postId] = action.split('_');
        
        // –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è
        await ctx.reply(
          '–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç–æ—Ç –ø–æ—Å—Ç?',
          Markup.inlineKeyboard([
            [Markup.button.callback('‚úÖ –î–∞, —É–¥–∞–ª–∏—Ç—å', `confirm_delete_${postType}_${postId}`)],
            [Markup.button.callback('‚ùå –ù–µ—Ç, –æ—Ç–º–µ–Ω–∏—Ç—å', 'back_to_posts')]
          ])
        );
      } else if (action.startsWith('confirm_delete_')) {
        const [, , postType, postId] = action.split('_');
        
        try {
          if (postType === 'content') {
            await postService.deletePost(postId, ctx.from.id);
            await ctx.reply('–ö–æ–Ω—Ç–µ–Ω—Ç–Ω—ã–π –ø–æ—Å—Ç —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω.');
          } else if (postType === 'ad') {
            await adPostService.deleteAdPost(postId, ctx.from.id);
            await ctx.reply('–†–µ–∫–ª–∞–º–Ω—ã–π –ø–æ—Å—Ç —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω.');
          }
          
          return ctx.wizard.selectStep(0);
        } catch (error) {
          console.error('Error deleting post:', error);
          await ctx.reply(`–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø–æ—Å—Ç–∞: ${error.message}`);
          return ctx.wizard.selectStep(0);
        }
      } else if (action.startsWith('stats_')) {
        const [, , postId] = action.split('_');
        
        try {
          const adPost = await adPostService.getAdPostById(postId, ctx.from.id);
          
          if (!adPost) {
            await ctx.reply('–†–µ–∫–ª–∞–º–Ω—ã–π –ø–æ—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.');
            return ctx.wizard.selectStep(0);
          }
          
          // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ä–µ–∫–ª–∞–º–Ω–æ–≥–æ –ø–æ—Å—Ç–∞
          const message = `
üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–µ–∫–ª–∞–º–Ω–æ–≥–æ –ø–æ—Å—Ç–∞</b>

<b>–ü—Ä–æ—Å–º–æ—Ç—Ä—ã:</b> ${adPost.stats?.views || 0}
<b>–ö–ª–∏–∫–∏:</b> ${adPost.stats?.clicks || 0}
<b>–í–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è:</b> ${adPost.stats?.interactions || 0}
<b>–ö–æ–Ω–≤–µ—Ä—Å–∏–∏:</b> ${adPost.stats?.conversions || 0}

<b>CTR:</b> ${calculateCTR(adPost.stats?.views, adPost.stats?.clicks)}%
<b>–°—Ç–æ–∏–º–æ—Å—Ç—å –∫–ª–∏–∫–∞:</b> ${calculateCPC(adPost.budget, adPost.stats?.clicks)} —Ä—É–±.
<b>–°—Ç–æ–∏–º–æ—Å—Ç—å –ø—Ä–æ—Å–º–æ—Ç—Ä–∞:</b> ${calculateCPM(adPost.budget, adPost.stats?.views)} —Ä—É–±.
          `;
          
          await ctx.reply(message, {
            parse_mode: 'HTML',
            reply_markup: Markup.inlineKeyboard([
              [Markup.button.callback('üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –ø–æ—Å—Ç—É', 'back_to_post')],
              [Markup.button.callback('üìä –ü–æ–¥—Ä–æ–±–Ω—ã–π –æ—Ç—á–µ—Ç', `detailed_stats_${postId}`)]
            ])
          });
        } catch (error) {
          console.error('Error getting ad post stats:', error);
          await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.');
          return ctx.wizard.selectStep(0);
        }
      } else if (action === 'back_to_post') {
        // –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –ø—Ä–æ—Å–º–æ—Ç—Ä—É –ø–æ—Å—Ç–∞
        return ctx.wizard.selectStep(3);
      }
    } else {
      await ctx.reply('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏.');
      return ctx.wizard.selectStep(0);
    }
  }
);

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É—Å–µ—á–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞
function truncateText(text, maxLength) {
  if (!text) return '';
  return text.length > maxLength ? text.substring(0, maxLength) + '...' : text;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã—á–∏—Å–ª–µ–Ω–∏—è CTR
function calculateCTR(views, clicks) {
  if (!views || views === 0 || !clicks) return '0.00';
  return ((clicks / views) * 100).toFixed(2);
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã—á–∏—Å–ª–µ–Ω–∏—è —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –∫–ª–∏–∫–∞
function calculateCPC(budget, clicks) {
  if (!budget || !clicks || clicks === 0) return '0.00';
  return (budget / clicks).toFixed(2);
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã—á–∏—Å–ª–µ–Ω–∏—è —Å—Ç–æ–∏–º–æ—Å—Ç–∏ 1000 –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤
function calculateCPM(budget, views) {
  if (!budget || !views || views === 0) return '0.00';
  return ((budget / views) * 1000).toFixed(2);
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–∞–ª–µ–Ω–¥–∞—Ä—è
function generateCalendar(month, posts) {
  const firstDay = month.clone().startOf('month');
  const lastDay = month.clone().endOf('month');
  const daysInMonth = lastDay.date();
  const startingDay = firstDay.day(); // 0 = –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ, 1 = –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫ –∏ —Ç.–¥.
  
  // –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç –¥–Ω–µ–π —Å –ø–æ—Å—Ç–∞–º–∏
  const daysWithPosts = {};
  posts.forEach(post => {
    const day = post.date.date();
    if (!daysWithPosts[day]) {
      daysWithPosts[day] = { content: 0, ad: 0 };
    }
    daysWithPosts[day][post.type]++;
  });
  
  // –ó–∞–≥–æ–ª–æ–≤–∫–∏ –¥–Ω–µ–π –Ω–µ–¥–µ–ª–∏
  const weekDays = ['–ü–Ω', '–í—Ç', '–°—Ä', '–ß—Ç', '–ü—Ç', '–°–±', '–í—Å'];
  let calendar = weekDays.join(' ') + '\n';
  
  // –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Å—Ç—ã–µ –¥–Ω–∏ –≤ –Ω–∞—á–∞–ª–µ –º–µ—Å—è—Ü–∞
  let dayCount = 1;
  let week = '';
  for (let i = 0; i < startingDay; i++) {
    week += '   ';
  }
  
  // –î–æ–±–∞–≤–ª—è–µ–º –¥–Ω–∏ –º–µ—Å—è—Ü–∞
  for (let i = 1; i <= daysInMonth; i++) {
    // –ï—Å–ª–∏ —ç—Ç–æ –Ω–∞—á–∞–ª–æ –Ω–µ–¥–µ–ª–∏ –∏ –Ω–µ –ø–µ—Ä–≤—ã–π –¥–µ–Ω—å –º–µ—Å—è—Ü–∞
    if ((startingDay + i - 1) % 7 === 0 && i > 1) {
      calendar += week + '\n';
      week = '';
    }
    
    // –î–æ–±–∞–≤–ª—è–µ–º –¥–µ–Ω—å —Å –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–º —Ç–∏–ø–∞ –ø–æ—Å—Ç–æ–≤
    if (daysWithPosts[i]) {
      // –ú–∞—Ä–∫–∏—Ä–æ–≤–∫–∞ –¥–Ω—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–æ–≤ –ø–æ—Å—Ç–æ–≤
      if (daysWithPosts[i].content > 0 && daysWithPosts[i].ad > 0) {
        week += `[${i}]`; // –ï—Å—Ç—å –æ–±–∞ —Ç–∏–ø–∞ –ø–æ—Å—Ç–æ–≤
      } else if (daysWithPosts[i].content > 0) {
        week += `(${i})`; // –¢–æ–ª—å–∫–æ –∫–æ–Ω—Ç–µ–Ω—Ç–Ω—ã–µ –ø–æ—Å—Ç—ã
      } else if (daysWithPosts[i].ad > 0) {
        week += `{${i}}`; // –¢–æ–ª—å–∫–æ —Ä–µ–∫–ª–∞–º–Ω—ã–µ –ø–æ—Å—Ç—ã
      }
    } else {
      // –ù–µ—Ç –ø–æ—Å—Ç–æ–≤ –Ω–∞ —ç—Ç–æ—Ç –¥–µ–Ω—å
      week += `${i.toString().padStart(2, ' ')} `;
    }
    
    dayCount++;
  }
  
  // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é –Ω–µ–¥–µ–ª—é
  calendar += week;
  
  // –î–æ–±–∞–≤–ª—è–µ–º –ª–µ–≥–µ–Ω–¥—É
  calendar += '\n\n[–¥–µ–Ω—å] - –µ—Å—Ç—å –∫–æ–Ω—Ç–µ–Ω—Ç–Ω—ã–µ –∏ —Ä–µ–∫–ª–∞–º–Ω—ã–µ –ø–æ—Å—Ç—ã';
  calendar += '\n(–¥–µ–Ω—å) - –µ—Å—Ç—å –∫–æ–Ω—Ç–µ–Ω—Ç–Ω—ã–µ –ø–æ—Å—Ç—ã';
  calendar += '\n{–¥–µ–Ω—å} - –µ—Å—Ç—å —Ä–µ–∫–ª–∞–º–Ω—ã–µ –ø–æ—Å—Ç—ã';
  
  return calendar;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —ç–º–æ–¥–∑–∏ —Å—Ç–∞—Ç—É—Å–∞
function getStatusEmoji(status) {
  switch (status) {
    case 'scheduled':
      return 'üïí';
    case 'published':
      return '‚úÖ';
    case 'active':
      return '‚úÖ';
    case 'pending':
      return '‚è≥';
    case 'failed':
      return '‚ùå';
    case 'rejected':
      return '‚ùå';
    case 'deleted':
      return 'üóë';
    case 'completed':
      return 'üèÅ';
    default:
      return '‚ùì';
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ —Å—Ç–∞—Ç—É—Å–∞
function getStatusText(status) {
  switch (status) {
    case 'scheduled':
      return '–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω';
    case 'published':
      return '–û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω';
    case 'active':
      return '–ê–∫—Ç–∏–≤–µ–Ω';
    case 'pending':
      return '–û–∂–∏–¥–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è';
    case 'failed':
      return '–û—à–∏–±–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏';
    case 'rejected':
      return '–û—Ç–∫–ª–æ–Ω–µ–Ω';
    case 'deleted':
      return '–£–¥–∞–ª–µ–Ω';
    case 'completed':
      return '–ó–∞–≤–µ—Ä—à–µ–Ω';
    default:
      return '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ';
  }
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ callback-–∑–∞–ø—Ä–æ—Å–æ–≤
calendarScene.action(/.*/, (ctx) => {
  ctx.answerCbQuery();
  return ctx.wizard.next();
});

module.exports = calendarScene; 