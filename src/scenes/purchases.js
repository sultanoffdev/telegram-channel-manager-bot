const { Scenes } = require('telegraf');
const { Markup } = require('telegraf');
const purchaseService = require('../services/purchaseService');
const adPostService = require('../services/adPostService');
const channelService = require('../services/channelService');

const purchasesScene = new Scenes.WizardScene(
  'purchases',
  // –®–∞–≥ 1: –í—ã–±–æ—Ä –¥–µ–π—Å—Ç–≤–∏—è
  async (ctx) => {
    await ctx.reply(
      'üìç –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–∫—É–ø–∞–º–∏ —Ä–µ–∫–ª–∞–º—ã\n\n' +
      '–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:',
      Markup.keyboard([
        ['üìù –°–æ–∑–¥–∞—Ç—å –∑–∞–∫—É–ø', 'üìã –ú–æ–∏ –∑–∞–∫—É–ø—ã'],
        ['üìä –ê–Ω–∞–ª–∏–∑ —Ç—Ä–∞—Ñ–∏–∫–∞', 'üîô –ù–∞–∑–∞–¥']
      ]).resize()
    );
    return ctx.wizard.next();
  },
  // –®–∞–≥ 2: –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –¥–µ–π—Å—Ç–≤–∏—è
  async (ctx) => {
    if (ctx.message.text === 'üîô –ù–∞–∑–∞–¥') {
      return ctx.scene.leave();
    }

    if (ctx.message.text === 'üìù –°–æ–∑–¥–∞—Ç—å –∑–∞–∫—É–ø') {
      try {
        const channels = await channelService.getUserChannels(ctx.from.id);
        
        if (!channels || channels.length === 0) {
          await ctx.reply(
            '–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤. –î–æ–±–∞–≤—å—Ç–µ –∫–∞–Ω–∞–ª –≤ —Ä–∞–∑–¥–µ–ª–µ "–ú–æ–∏ –∫–∞–Ω–∞–ª—ã"',
            Markup.keyboard([['üîô –ù–∞–∑–∞–¥']]).resize()
          );
          return ctx.scene.leave();
        }

        // –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–∞–Ω–∞–ª–∞–º–∏ –∏ –æ–ø—Ü–∏–µ–π "–í—ã–±—Ä–∞—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ"
        const keyboard = [
          ...channels.map(channel => [Markup.button.callback(channel.title, `channel_${channel.id}`)]),
          [Markup.button.callback('üì¢ –í—ã–±—Ä–∞—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –∫–∞–Ω–∞–ª–æ–≤', 'select_multiple')]
        ];

        await ctx.reply(
          '1Ô∏è‚É£ –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞–Ω–∞–ª –∏–ª–∏ —Å–µ—Ç—å –∫–∞–Ω–∞–ª–æ–≤ –¥–ª—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è —Ä–µ–∫–ª–∞–º—ã:',
          Markup.inlineKeyboard(keyboard)
        );
        ctx.session.purchaseType = 'new';
        return ctx.wizard.next();
      } catch (error) {
        console.error('Error creating purchase:', error);
        await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–∫—É–ø–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
        return ctx.scene.leave();
      }
    }

    if (ctx.message.text === 'üìã –ú–æ–∏ –∑–∞–∫—É–ø—ã') {
      try {
        const purchases = await purchaseService.getUserPurchases(ctx.from.id);

        if (!purchases || purchases.length === 0) {
          await ctx.reply('–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –∑–∞–∫—É–ø–æ–≤.');
          return ctx.wizard.selectStep(0);
        }

        const keyboard = purchases.map(purchase => {
          const date = new Date(purchase.createdAt);
          const dateStr = date.toLocaleString('ru-RU');
          const statusEmoji = getStatusEmoji(purchase.status);
          return [Markup.button.callback(`${dateStr} ${statusEmoji} ${purchase.channels.map(c => c.title).join(', ')}`, `view_purchase_${purchase._id}`)];
        });

        await ctx.reply(
          '–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–∫—É–ø –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞:',
          Markup.inlineKeyboard(keyboard)
        );
        ctx.session.purchaseType = 'view';
        return ctx.wizard.next();
      } catch (error) {
        console.error('Error fetching purchases:', error);
        await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –∑–∞–∫—É–ø–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
        return ctx.scene.leave();
      }
    }

    if (ctx.message.text === 'üìä –ê–Ω–∞–ª–∏–∑ —Ç—Ä–∞—Ñ–∏–∫–∞') {
      try {
        const purchases = await purchaseService.getUserPurchases(ctx.from.id);
        const activePurchases = purchases.filter(p => p.status === 'active' || p.status === 'completed');

        if (!activePurchases || activePurchases.length === 0) {
          await ctx.reply('–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∏–ª–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –∑–∞–∫—É–ø–æ–≤ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Ç—Ä–∞—Ñ–∏–∫–∞.');
          return ctx.wizard.selectStep(0);
        }

        const keyboard = activePurchases.map(purchase => {
          const date = new Date(purchase.createdAt);
          const dateStr = date.toLocaleString('ru-RU');
          return [Markup.button.callback(`${dateStr} - ${purchase.channels.map(c => c.title).join(', ')}`, `analyze_purchase_${purchase._id}`)];
        });

        await ctx.reply(
          '–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–∫—É–ø –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Ç—Ä–∞—Ñ–∏–∫–∞:',
          Markup.inlineKeyboard(keyboard)
        );
        ctx.session.purchaseType = 'analyze';
        return ctx.wizard.next();
      } catch (error) {
        console.error('Error fetching purchases for analysis:', error);
        await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –∑–∞–∫—É–ø–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
        return ctx.scene.leave();
      }
    }

    await ctx.reply('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é.');
    return ctx.wizard.selectStep(0);
  },
  // –®–∞–≥ 3: –í—ã–±–æ—Ä –∫–∞–Ω–∞–ª–æ–≤ –∏–ª–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä –∑–∞–∫—É–ø–∞
  async (ctx) => {
    if (ctx.session.purchaseType === 'new') {
      if (ctx.callbackQuery) {
        if (ctx.callbackQuery.data === 'select_multiple') {
          try {
            const channels = await channelService.getUserChannels(ctx.from.id);
            
            const keyboard = channels.map(channel => [
              Markup.button.callback(
                channel.title + (ctx.session.selectedChannels?.includes(channel.id) ? ' ‚úÖ' : ''),
                `toggle_${channel.id}`
              )
            ]);
            keyboard.push([Markup.button.callback('‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –≤—ã–±–æ—Ä', 'confirm_channels')]);

            await ctx.editMessageText(
              '1Ô∏è‚É£ –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞–Ω–∞–ª—ã –¥–ª—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è —Ä–µ–∫–ª–∞–º—ã:',
              Markup.inlineKeyboard(keyboard)
            );
            return;
          } catch (error) {
            console.error('Error selecting multiple channels:', error);
            await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –∫–∞–Ω–∞–ª–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
            return ctx.wizard.selectStep(0);
          }
        }

        if (ctx.callbackQuery.data === 'confirm_channels') {
          if (!ctx.session.selectedChannels?.length) {
            await ctx.reply('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –∫–∞–Ω–∞–ª.');
            return;
          }
        } else if (ctx.callbackQuery.data.startsWith('toggle_')) {
          const channelId = ctx.callbackQuery.data.replace('toggle_', '');
          ctx.session.selectedChannels = ctx.session.selectedChannels || [];
          
          const index = ctx.session.selectedChannels.indexOf(channelId);
          if (index === -1) {
            ctx.session.selectedChannels.push(channelId);
          } else {
            ctx.session.selectedChannels.splice(index, 1);
          }

          try {
            const channels = await channelService.getUserChannels(ctx.from.id);
            
            const keyboard = channels.map(channel => [
              Markup.button.callback(
                channel.title + (ctx.session.selectedChannels.includes(channel.id) ? ' ‚úÖ' : ''),
                `toggle_${channel.id}`
              )
            ]);
            keyboard.push([Markup.button.callback('‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –≤—ã–±–æ—Ä', 'confirm_channels')]);

            await ctx.editMessageText(
              '1Ô∏è‚É£ –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞–Ω–∞–ª—ã –¥–ª—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è —Ä–µ–∫–ª–∞–º—ã:',
              Markup.inlineKeyboard(keyboard)
            );
            return;
          } catch (error) {
            console.error('Error toggling channel selection:', error);
            await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –∫–∞–Ω–∞–ª–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
            return ctx.wizard.selectStep(0);
          }
        } else {
          ctx.session.selectedChannels = [ctx.callbackQuery.data.replace('channel_', '')];
        }

        try {
          // –ü–æ–ª—É—á–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ —Ä–µ–∫–ª–∞–º–Ω—ã–µ –ø–æ—Å—Ç—ã
          const adPosts = await adPostService.getUserAdPosts(ctx.from.id);
          
          const keyboard = [
            [Markup.button.callback('üìù –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π —Ä–µ–∫–ª–∞–º–Ω—ã–π –ø–æ—Å—Ç', 'new_post')]
          ];
          
          if (adPosts && adPosts.length > 0) {
            keyboard.push([Markup.button.callback('üìã –í—ã–±—Ä–∞—Ç—å –∏–∑ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö', 'select_saved_post')]);
          }

          await ctx.reply(
            '2Ô∏è‚É£ –í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∫–ª–∞–º–Ω—ã–π –ø–æ—Å—Ç:',
            Markup.inlineKeyboard(keyboard)
          );
          return ctx.wizard.next();
        } catch (error) {
          console.error('Error fetching ad posts:', error);
          await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–µ–∫–ª–∞–º–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
          return ctx.wizard.selectStep(0);
        }
      }
    } else if (ctx.session.purchaseType === 'view' || ctx.session.purchaseType === 'analyze') {
      if (ctx.callbackQuery) {
        const isAnalysis = ctx.session.purchaseType === 'analyze';
        const purchaseId = ctx.callbackQuery.data.replace(isAnalysis ? 'analyze_purchase_' : 'view_purchase_', '');
        
        try {
          const purchase = await purchaseService.getPurchaseById(purchaseId, ctx.from.id);
          
          if (!purchase) {
            await ctx.reply('–ó–∞–∫—É–ø –Ω–µ –Ω–∞–π–¥–µ–Ω.');
            return ctx.wizard.selectStep(0);
          }

          // –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –∑–∞–∫—É–ø–∞ –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–∏—Ö –¥–µ–π—Å—Ç–≤–∏–π
          ctx.session.currentPurchaseId = purchaseId;

          // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ —Ç—Ä–∞—Ñ–∏–∫–µ
          const trafficData = purchase.trafficData || {
            visits: 0,
            uniqueVisitors: 0,
            avgTimeOnSite: '0:00',
            conversion: 0,
            sources: [],
            geoData: {},
            devices: {}
          };
          
          let message = '';
          
          if (isAnalysis) {
            message = 
              `üìä <b>–ê–Ω–∞–ª–∏–∑ —Ç—Ä–∞—Ñ–∏–∫–∞ –ø–æ –∑–∞–∫—É–ø—É</b>\n\n` +
              `üìÖ –î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è: ${new Date(purchase.createdAt).toLocaleString('ru-RU')}\n` +
              `üì¢ –ö–∞–Ω–∞–ª—ã: ${purchase.channels.map(c => c.title).join(', ')}\n` +
              `üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å: ${purchase.price} —Ä—É–±.\n` +
              `‚è± –°—Ä–æ–∫ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è: ${purchase.duration} –¥–Ω–µ–π\n` +
              `üîó –°—Å—ã–ª–∫–∞ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è: ${purchase.trackingLink}\n\n` +
              `üìà <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ç—Ä–∞—Ñ–∏–∫–∞:</b>\n` +
              `üëÅ –í—Å–µ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤: ${trafficData.visits}\n` +
              `üë§ –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø–æ—Å–µ—Ç–∏—Ç–µ–ª–µ–π: ${trafficData.uniqueVisitors}\n` +
              `‚è± –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –Ω–∞ —Å–∞–π—Ç–µ: ${trafficData.avgTimeOnSite}\n` +
              `üîÑ –ö–æ–Ω–≤–µ—Ä—Å–∏—è: ${trafficData.conversion}%\n\n`;
              
            // –î–æ–±–∞–≤–ª—è–µ–º –≥–µ–æ–≥—Ä–∞—Ñ–∏—é –ø–æ—Å–µ—Ç–∏—Ç–µ–ª–µ–π
            message += `üåç <b>–ì–µ–æ–≥—Ä–∞—Ñ–∏—è –ø–æ—Å–µ—Ç–∏—Ç–µ–ª–µ–π:</b>\n`;
            const geoEntries = Object.entries(trafficData.geoData || {});
            if (geoEntries.length > 0) {
              geoEntries
                .sort((a, b) => b[1] - a[1])
                .slice(0, 5)
                .forEach(([country, count]) => {
                  message += `- ${country}: ${count} (${Math.round(count / trafficData.visits * 100)}%)\n`;
                });
            } else {
              message += `- –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö\n`;
            }
            
            message += `\nüì± <b>–£—Å—Ç—Ä–æ–π—Å—Ç–≤–∞:</b>\n`;
            const deviceEntries = Object.entries(trafficData.devices || {});
            if (deviceEntries.length > 0) {
              deviceEntries
                .sort((a, b) => b[1] - a[1])
                .forEach(([device, count]) => {
                  message += `- ${device}: ${count} (${Math.round(count / trafficData.visits * 100)}%)\n`;
                });
            } else {
              message += `- –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö\n`;
            }
            
            message += `\nüìâ <b>–≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∑–∞–∫—É–ø–∞:</b>\n`;
            message += `- –°—Ç–æ–∏–º–æ—Å—Ç—å –∑–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä: ${trafficData.visits > 0 ? (purchase.price / trafficData.visits).toFixed(2) : 0} —Ä—É–±.\n`;
            message += `- –°—Ç–æ–∏–º–æ—Å—Ç—å –∑–∞ —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ –ø–æ—Å–µ—Ç–∏—Ç–µ–ª—è: ${trafficData.uniqueVisitors > 0 ? (purchase.price / trafficData.uniqueVisitors).toFixed(2) : 0} —Ä—É–±.\n`;
            message += `- –°—Ç–æ–∏–º–æ—Å—Ç—å –∑–∞ –∫–æ–Ω–≤–µ—Ä—Å–∏—é: ${(trafficData.visits * trafficData.conversion / 100) > 0 ? (purchase.price / (trafficData.visits * trafficData.conversion / 100)).toFixed(2) : 0} —Ä—É–±.\n`;
          } else {
            message = 
              `üìä <b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞–∫—É–ø–µ</b>\n\n` +
              `üìÖ –î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è: ${new Date(purchase.createdAt).toLocaleString('ru-RU')}\n` +
              `üì¢ –ö–∞–Ω–∞–ª—ã: ${purchase.channels.map(c => c.title).join(', ')}\n` +
              `üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å: ${purchase.price} —Ä—É–±.\n` +
              `‚è± –°—Ä–æ–∫ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è: ${purchase.duration} –¥–Ω–µ–π\n` +
              `üìä –°—Ç–∞—Ç—É—Å: ${getStatusText(purchase.status)}\n`;
              
            if (purchase.additionalConditions) {
              message += `üìù –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —É—Å–ª–æ–≤–∏—è: ${purchase.additionalConditions}\n`;
            }
            
            message += `\nüîó –°—Å—ã–ª–∫–∞ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è: ${purchase.trackingLink}\n\n`;
            
            message += 
              `üìà <b>–ö—Ä–∞—Ç–∫–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>\n` +
              `üëÅ –ü—Ä–æ—Å–º–æ—Ç—Ä–æ–≤: ${trafficData.visits}\n` +
              `üë§ –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø–æ—Å–µ—Ç–∏—Ç–µ–ª–µ–π: ${trafficData.uniqueVisitors}\n` +
              `üîÑ –ö–æ–Ω–≤–µ—Ä—Å–∏—è: ${trafficData.conversion}%\n`;
          }
          
          await ctx.reply(message, { parse_mode: 'HTML' });
          
          const keyboard = [
            ['üìä –û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É'],
            ['üìä –ü–æ–¥—Ä–æ–±–Ω—ã–π –∞–Ω–∞–ª–∏–∑', 'üì§ –≠–∫—Å–ø–æ—Ä—Ç –æ—Ç—á–µ—Ç–∞'],
            ['üîô –ù–∞–∑–∞–¥']
          ];
          
          await ctx.reply('–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:', 
            Markup.keyboard(keyboard).resize()
          );
          return ctx.wizard.next();
        } catch (error) {
          console.error('Error viewing purchase:', error);
          await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ –∑–∞–∫—É–ø–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
          return ctx.wizard.selectStep(0);
        }
      }
    }

    await ctx.reply('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∫–∞–Ω–∞–ª –∏–ª–∏ –¥–µ–π—Å—Ç–≤–∏–µ.');
    return ctx.wizard.selectStep(1);
  },
  // –®–∞–≥ 4: –í—ã–±–æ—Ä –∏–ª–∏ —Å–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∫–ª–∞–º–Ω–æ–≥–æ –ø–æ—Å—Ç–∞
  async (ctx) => {
    if (ctx.callbackQuery) {
      if (ctx.callbackQuery.data === 'new_post') {
        await ctx.reply(
          '–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ä–µ–∫–ª–∞–º–Ω—ã–π –ø–æ—Å—Ç (—Ç–µ–∫—Å—Ç, —Ñ–æ—Ç–æ, –≤–∏–¥–µ–æ –∏–ª–∏ –∏—Ö –∫–æ–º–±–∏–Ω–∞—Ü–∏—é)'
        );
        ctx.session.postType = 'new';
        return ctx.wizard.next();
      }
      
      if (ctx.callbackQuery.data === 'select_saved_post') {
        const adPosts = await AdPost.find({ userId: ctx.from.id });
        
        const keyboard = adPosts.map(post => [
          Markup.button.callback(
            post.title || '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è',
            `select_post_${post._id}`
          )
        ]);
        
        await ctx.editMessageText(
          '–í—ã–±–µ—Ä–∏—Ç–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π —Ä–µ–∫–ª–∞–º–Ω—ã–π –ø–æ—Å—Ç:',
          Markup.inlineKeyboard(keyboard)
        );
        return;
      }
      
      if (ctx.callbackQuery.data.startsWith('select_post_')) {
        const postId = ctx.callbackQuery.data.replace('select_post_', '');
        const post = await AdPost.findById(postId);
        
        if (!post) {
          await ctx.reply('–ü–æ—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.');
          return ctx.wizard.selectStep(1);
        }
        
        ctx.session.selectedPost = post;
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∑–∞–∫—É–ø–∞
        await ctx.reply(
          '3Ô∏è‚É£ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —É—Å–ª–æ–≤–∏–π —Ä–∞–∑–º–µ—â–µ–Ω–∏—è:\n\n' +
          '–£–∫–∞–∂–∏—Ç–µ —Å—Ç–æ–∏–º–æ—Å—Ç—å —Ä–∞–∑–º–µ—â–µ–Ω–∏—è (–≤ —Ä—É–±–ª—è—Ö):'
        );
        return ctx.wizard.next();
      }
    }
    
    if (ctx.message && ctx.session.postType === 'new') {
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤—ã–π –ø–æ—Å—Ç
      const newPost = new AdPost({
        userId: ctx.from.id,
        content: ctx.message,
        title: '–ù–æ–≤—ã–π –ø–æ—Å—Ç'
      });
      
      await newPost.save();
      ctx.session.selectedPost = newPost;
      
      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∑–∞–∫—É–ø–∞
      await ctx.reply(
        '3Ô∏è‚É£ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —É—Å–ª–æ–≤–∏–π —Ä–∞–∑–º–µ—â–µ–Ω–∏—è:\n\n' +
        '–£–∫–∞–∂–∏—Ç–µ —Å—Ç–æ–∏–º–æ—Å—Ç—å —Ä–∞–∑–º–µ—â–µ–Ω–∏—è (–≤ —Ä—É–±–ª—è—Ö):'
      );
      return ctx.wizard.next();
    }
    
    await ctx.reply('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∏–ª–∏ —Å–æ–∑–¥–∞–π—Ç–µ —Ä–µ–∫–ª–∞–º–Ω—ã–π –ø–æ—Å—Ç.');
    return ctx.wizard.selectStep(2);
  },
  // –®–∞–≥ 5: –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —É—Å–ª–æ–≤–∏–π —Ä–∞–∑–º–µ—â–µ–Ω–∏—è
  async (ctx) => {
    if (ctx.message.text && !isNaN(ctx.message.text)) {
      ctx.session.price = parseInt(ctx.message.text);
      
      await ctx.reply(
        '–£–∫–∞–∂–∏—Ç–µ —Å—Ä–æ–∫ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è (–≤ –¥–Ω—è—Ö):'
      );
      return ctx.wizard.next();
    }
    
    await ctx.reply('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å —Ä–∞–∑–º–µ—â–µ–Ω–∏—è (—á–∏—Å–ª–æ).');
    return ctx.wizard.selectStep(3);
  },
  // –®–∞–≥ 6: –£–∫–∞–∑–∞–Ω–∏–µ —Å—Ä–æ–∫–∞ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è
  async (ctx) => {
    if (ctx.message.text && !isNaN(ctx.message.text)) {
      ctx.session.duration = parseInt(ctx.message.text);
      
      await ctx.reply(
        '–£–∫–∞–∂–∏—Ç–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —É—Å–ª–æ–≤–∏—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è (–∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ "–Ω–µ—Ç"):'
      );
      return ctx.wizard.next();
    }
    
    await ctx.reply('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Å—Ä–æ–∫ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è (—á–∏—Å–ª–æ –¥–Ω–µ–π).');
    return ctx.wizard.selectStep(4);
  },
  // –®–∞–≥ 7: –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —É—Å–ª–æ–≤–∏—è
  async (ctx) => {
    ctx.session.additionalConditions = ctx.message.text === '–Ω–µ—Ç' ? '' : ctx.message.text;
    
    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å—Å—ã–ª–∫—É –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è
    const trackingLink = generateTrackingLink(ctx.from.id);
    
    try {
      // –°–æ–∑–¥–∞–µ–º –∑–∞–∫—É–ø
      const selectedChannels = await getSelectedChannels(ctx);
      
      const purchaseData = {
        userId: ctx.from.id,
        channels: selectedChannels,
        adPost: ctx.session.selectedPost._id,
        price: ctx.session.price,
        duration: ctx.session.duration,
        additionalConditions: ctx.session.additionalConditions,
        trackingLink: trackingLink,
        status: 'pending'
      };
      
      const purchase = await purchaseService.createPurchase(purchaseData);
      
      // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–≤–∏—Ç–∞–Ω—Ü–∏—é
      const receipt = generateReceipt(purchase, selectedChannels, ctx.session.selectedPost);
      
      // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ä–µ–∫–ª–∞–º–Ω—ã–π –ø–æ—Å—Ç
      const adMessage = generateAdMessage(ctx.session.selectedPost, trackingLink);
      
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–≤–∏—Ç–∞–Ω—Ü–∏—é
      await ctx.reply(
        '<b>‚úÖ –ó–∞–∫—É–ø —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!</b>\n\n' +
        '<b>üìù –ö–≤–∏—Ç–∞–Ω—Ü–∏—è (–ø–µ—Ä–µ—Å–ª–∞—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É):</b>\n' +
        '-------------------\n' +
        receipt +
        '-------------------\n',
        { parse_mode: 'HTML' }
      );
      
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∫–ª–∞–º–Ω—ã–π –ø–æ—Å—Ç
      await ctx.reply(
        '<b>üì¢ –†–µ–∫–ª–∞–º–Ω—ã–π –ø–æ—Å—Ç (–ø–µ—Ä–µ—Å–ª–∞—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É):</b>\n' +
        '-------------------\n' +
        adMessage +
        '-------------------\n',
        { parse_mode: 'HTML' }
      );
      
      await ctx.reply(
        '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–µ—Ä–µ—à–ª–∏—Ç–µ –æ–±–∞ —Å–æ–æ–±—â–µ–Ω–∏—è (–∫–≤–∏—Ç–∞–Ω—Ü–∏—é –∏ —Ä–µ–∫–ª–∞–º–Ω—ã–π –ø–æ—Å—Ç) –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –∫–∞–Ω–∞–ª–∞ –¥–ª—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è.',
        Markup.keyboard([
          ['üîÑ –°–æ–∑–¥–∞—Ç—å –µ—â–µ –∑–∞–∫—É–ø'],
          ['üìä –ê–Ω–∞–ª–∏–∑ —Ç—Ä–∞—Ñ–∏–∫–∞'],
          ['üîô –ù–∞–∑–∞–¥']
        ]).resize()
      );
      return ctx.wizard.next();
    } catch (error) {
      console.error('Error creating purchase:', error);
      await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–∫—É–ø–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
      return ctx.scene.leave();
    }
  },
  // –®–∞–≥ 8: –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –¥–µ–π—Å—Ç–≤–∏—è
  async (ctx) => {
    if (ctx.message.text === 'üîô –ù–∞–∑–∞–¥') {
      return ctx.scene.leave();
    } else if (ctx.message.text === 'üîÑ –°–æ–∑–¥–∞—Ç—å –µ—â–µ –∑–∞–∫—É–ø') {
      return ctx.wizard.selectStep(0);
    } else {
      return ctx.scene.leave();
    }
  }
);

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏

/**
 * –ü–æ–ª—É—á–∞–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –∫–∞–Ω–∞–ª—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 * @param {Object} ctx - Context –æ–±—ä–µ–∫—Ç
 * @returns {Promise<Array>} - –ú–∞—Å—Å–∏–≤ –æ–±—ä–µ–∫—Ç–æ–≤ –∫–∞–Ω–∞–ª–æ–≤
 */
async function getSelectedChannels(ctx) {
  try {
    const channels = await channelService.getUserChannels(ctx.from.id);
    return channels
      .filter(channel => ctx.session.selectedChannels.includes(channel.id))
      .map(channel => ({
        id: channel.id,
        title: channel.title
      }));
  } catch (error) {
    console.error('Error getting selected channels:', error);
    return [];
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ —Ç—Ä–∞—Ñ–∏–∫–µ
async function getTrafficData(trackingLink) {
  try {
    // –ó–¥–µ—Å—å –±—É–¥–µ—Ç –ª–æ–≥–∏–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ —Ç—Ä–∞—Ñ–∏–∫–µ
    // –≠—Ç–æ –∑–∞–≥–ª—É—à–∫–∞, –∫–æ—Ç–æ—Ä—É—é –Ω—É–∂–Ω–æ –∑–∞–º–µ–Ω–∏—Ç—å —Ä–µ–∞–ª—å–Ω—ã–º API-–∑–∞–ø—Ä–æ—Å–æ–º
    
    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–ª—É—á–∞–π–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
    const visits = Math.floor(Math.random() * 1000) + 50;
    const uniqueVisitors = Math.floor(visits * (0.7 + Math.random() * 0.2)); // 70-90% –æ—Ç –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤
    const conversionRate = (Math.random() * 5).toFixed(2); // 0-5%
    
    // –°–ª—É—á–∞–π–Ω–æ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ —Å—Ç—Ä–∞–Ω–∞–º
    const countries = ['–†–æ—Å—Å–∏—è', '–£–∫—Ä–∞–∏–Ω–∞', '–ë–µ–ª–∞—Ä—É—Å—å', '–ö–∞–∑–∞—Ö—Å—Ç–∞–Ω', '–°–®–ê', '–ì–µ—Ä–º–∞–Ω–∏—è'];
    const geoData = {};
    let remainingVisits = visits;
    
    for (let i = 0; i < countries.length - 1; i++) {
      const countryShare = i === 0 ? 
        Math.floor(remainingVisits * (0.5 + Math.random() * 0.3)) : // –ü–µ—Ä–≤–∞—è —Å—Ç—Ä–∞–Ω–∞ –ø–æ–ª—É—á–∞–µ—Ç 50-80%
        Math.floor(remainingVisits * Math.random() * 0.5); // –û—Å—Ç–∞–ª—å–Ω—ã–µ –ø–æ–ª—É—á–∞—é—Ç —Å–ª—É—á–∞–π–Ω—É—é –¥–æ–ª—é
      
      geoData[countries[i]] = countryShare;
      remainingVisits -= countryShare;
    }
    
    // –ü–æ—Å–ª–µ–¥–Ω—è—è —Å—Ç—Ä–∞–Ω–∞ –ø–æ–ª—É—á–∞–µ—Ç –æ—Å—Ç–∞–≤—à–∏–µ—Å—è –≤–∏–∑–∏—Ç—ã
    geoData[countries[countries.length - 1]] = remainingVisits;
    
    // –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞–º
    const devices = {
      '–ú–æ–±–∏–ª—å–Ω—ã–µ': Math.floor(visits * (0.6 + Math.random() * 0.2)),
      '–î–µ—Å–∫—Ç–æ–ø': Math.floor(visits * (0.2 + Math.random() * 0.2)),
    };
    devices['–ü–ª–∞–Ω—à–µ—Ç—ã'] = visits - devices['–ú–æ–±–∏–ª—å–Ω—ã–µ'] - devices['–î–µ—Å–∫—Ç–æ–ø'];
    
    // –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç —Å –¥–∞–Ω–Ω—ã–º–∏ –æ —Ç—Ä–∞—Ñ–∏–∫–µ
    return {
      visits,
      uniqueVisitors,
      avgTimeOnSite: `${Math.floor(Math.random() * 2)}:${Math.floor(Math.random() * 60).toString().padStart(2, '0')}`,
      conversion: conversionRate,
      sources: [
        { name: '–ü—Ä—è–º—ã–µ –ø–µ—Ä–µ—Ö–æ–¥—ã', count: Math.floor(uniqueVisitors * 0.7) },
        { name: 'Telegram', count: Math.floor(uniqueVisitors * 0.3) }
      ],
      geoData,
      devices
    };
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –æ —Ç—Ä–∞—Ñ–∏–∫–µ:', error);
    return null;
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å—Å—ã–ª–∫–∏ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è
function generateTrackingLink(userId) {
  // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è
  const randomString = Math.random().toString(36).substring(2, 10);
  return `https://t.me/your_bot_username?start=track_${userId}_${randomString}`;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–≤–∏—Ç–∞–Ω—Ü–∏–∏
function generateReceipt(purchase, channels, post) {
  const date = new Date(purchase.createdAt || Date.now()).toLocaleString('ru-RU');
  
  let receipt = 
    `üìÖ <b>–î–∞—Ç–∞:</b> ${date}\n` +
    `üì¢ <b>–ö–∞–Ω–∞–ª—ã:</b> ${channels.map(c => c.title).join(', ')}\n` +
    `üí∞ <b>–°—Ç–æ–∏–º–æ—Å—Ç—å:</b> ${purchase.price} —Ä—É–±.\n` +
    `‚è± <b>–°—Ä–æ–∫ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è:</b> ${purchase.duration} –¥–Ω–µ–π\n`;
  
  if (purchase.additionalConditions) {
    receipt += `üìù <b>–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —É—Å–ª–æ–≤–∏—è:</b> ${purchase.additionalConditions}\n`;
  }
  
  receipt += `üîó <b>–°—Å—ã–ª–∫–∞ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è:</b> ${purchase.trackingLink}\n`;
  
  receipt += `\n<b>ID –∑–∞–∫—É–ø–∞ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è:</b> ${purchase._id}\n`;
  
  return receipt;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ä–µ–∫–ª–∞–º–Ω–æ–≥–æ –ø–æ—Å—Ç–∞
function generateAdMessage(post, trackingLink) {
  let message = '';
  
  // –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –ø–æ—Å—Ç–∞
  if (post.content) {
    message += post.content + '\n\n';
  }
  
  // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–µ–¥–∏–∞—Ñ–∞–π–ª–∞—Ö, –µ—Å–ª–∏ –µ—Å—Ç—å
  if (post.mediaInfo) {
    message += `<i>–ü–æ—Å—Ç —Å–æ–¥–µ—Ä–∂–∏—Ç –º–µ–¥–∏–∞-—Ñ–∞–π–ª—ã</i>\n\n`;
  }
  
  // –î–æ–±–∞–≤–ª—è–µ–º —Å—Å—ã–ª–∫—É –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è
  message += `üîó <a href="${trackingLink}">–ü–æ–¥—Ä–æ–±–Ω–µ–µ</a>`;
  
  return message;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è emoji —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫—É–ø–∞
function getStatusEmoji(status) {
  switch (status) {
    case 'pending': return '‚è≥';
    case 'active': return '‚úÖ';
    case 'completed': return 'üèÅ';
    case 'rejected': return '‚ùå';
    case 'cancelled': return 'üö´';
    default: return '‚ùì';
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫—É–ø–∞
function getStatusText(status) {
  switch (status) {
    case 'pending': return '–û–∂–∏–¥–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è';
    case 'active': return '–ê–∫—Ç–∏–≤–µ–Ω';
    case 'completed': return '–ó–∞–≤–µ—Ä—à–µ–Ω';
    case 'rejected': return '–û—Ç–∫–ª–æ–Ω–µ–Ω';
    case 'cancelled': return '–û—Ç–º–µ–Ω–µ–Ω';
    default: return '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ';
  }
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ callback-–∑–∞–ø—Ä–æ—Å–æ–≤
purchasesScene.action(/.*/, (ctx) => {
  ctx.answerCbQuery();
  return ctx.wizard.next();
});

module.exports = purchasesScene; 