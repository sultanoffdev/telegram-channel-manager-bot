const { Scenes } = require('telegraf');
const { Markup } = require('telegraf');
const moment = require('moment-timezone');
const protectionService = require('../services/protectionService');
const channelService = require('../services/channelService');

const protectionScene = new Scenes.WizardScene(
  'protection',
  // –®–∞–≥ 1: –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∑–∞—â–∏—Ç—ã –∏ –ø—Ä–∏—ë–º–∞
  async (ctx) => {
    try {
      await ctx.reply(
        'üõ° *–ó–∞—â–∏—Ç–∞ –∏ –ü—Ä–∏—ë–º*\n\n' +
        'üó£ *–°–≤–æ–∏–º–∏ —Å–ª–æ–≤–∞–º–∏:*\n' +
        '–ó–∞—â–∏—Ç–∞ —ç—Ç–æ - —Ç–∞–∫–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞, –±–ª–∞–≥–æ–¥–∞—Ä—è –∫–æ—Ç–æ—Ä—ã–º –æ–Ω –∑–∞—â–∏—â–∞–µ—Ç –∫–∞–Ω–∞–ª –æ—Ç ' +
        '–Ω–∞–∫—Ä—É—Ç–∫–∏ –±–æ—Ç–æ–≤ –∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤.\n\n' +
        '–ü—Ä–∏—ë–º —ç—Ç–æ - –±–æ—Ç –±—É–¥–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–∏–Ω–∏–º–∞—Ç—å –≤ –∫–∞–Ω–∞–ª –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤.\n\n' +
        '*–ü—Ä–∏–Ω—Ü–∏–ø —Ä–∞–±–æ—Ç—ã:*\n' +
        '–ó–∞—â–∏—Ç–∞ - –Ω–∞ —Å—Ç–∞–¥–∏–∏ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è.\n' +
        '–ü—Ä–∏—ë–º - –≤—ã –≤—ã–±–∏—Ä–∞–µ—Ç–µ —Ç–∞–π–º–µ—Ä –ø—Ä–∏—ë–º–∞, –∏ –ø–æ—Å–ª–µ —ç—Ç–æ–≥–æ –±–æ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –≤—Å–µ –∑–∞—è–≤–∫–∏ –Ω–∞ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ.',
        {
          parse_mode: 'Markdown',
          ...Markup.keyboard([
            ['üõ° –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –∑–∞—â–∏—Ç—É', 'üîê –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –ø—Ä–∏—ë–º'],
            ['üîô –ù–∞–∑–∞–¥']
          ]).resize()
        }
      );
      
      return ctx.wizard.next();
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –≤ —Å—Ü–µ–Ω–µ –∑–∞—â–∏—Ç—ã (—à–∞–≥ 1):', error);
      await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
      return ctx.scene.leave();
    }
  },
  
  // –®–∞–≥ 2: –í—ã–±–æ—Ä —Ä–∞–∑–¥–µ–ª–∞ –∏–ª–∏ –≤–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
  async (ctx) => {
    try {
      if (!ctx.message || !ctx.message.text) {
        await ctx.reply('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏.');
        return;
      }
      
      switch (ctx.message.text) {
        case 'üîô –ù–∞–∑–∞–¥':
          return ctx.scene.leave();
          
        case 'üõ° –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –∑–∞—â–∏—Ç—É':
          await ctx.reply(
            'üõ° *–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∑–∞—â–∏—Ç—ã –∫–∞–Ω–∞–ª–æ–≤*\n\n' +
            '–§—É–Ω–∫—Ü–∏—è –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ –∏ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–∞ –≤ –±–ª–∏–∂–∞–π—à–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏.\n\n' +
            '–ü–ª–∞–Ω–∏—Ä—É–µ–º—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:\n' +
            '‚Ä¢ –û–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ –±–æ—Ç–æ–≤ –∏ –Ω–∞–∫—Ä—É—Ç–∫–∏\n' +
            '‚Ä¢ –ó–∞—â–∏—Ç–∞ –æ—Ç —Å–ø–∞–º–∞\n' +
            '‚Ä¢ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏\n' +
            '‚Ä¢ –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –≤—Ä–µ–¥–æ–Ω–æ—Å–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞',
            {
              parse_mode: 'Markdown',
              ...Markup.keyboard([
                ['üîô –ö –∑–∞—â–∏—Ç–µ –∏ –ø—Ä–∏—ë–º—É']
              ]).resize()
            }
          );
          return ctx.wizard.next();
          
        case 'üîê –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –ø—Ä–∏—ë–º':
          const userId = ctx.from.id;
          const channels = await channelService.getUserChannels(userId);
          
          if (!channels || channels.length === 0) {
            await ctx.reply(
              '–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤. –°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤—å—Ç–µ –∫–∞–Ω–∞–ª –≤ —Ä–∞–∑–¥–µ–ª–µ "–ú–æ–∏ –∫–∞–Ω–∞–ª—ã".',
              {
                ...Markup.keyboard([
                  ['üîô –ö –∑–∞—â–∏—Ç–µ –∏ –ø—Ä–∏—ë–º—É']
                ]).resize()
              }
            );
            return ctx.wizard.next();
          }
          
          ctx.wizard.state.channels = channels;
          
          await ctx.reply(
            'üîê *–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø—Ä–∏—ë–º–∞*\n\n' +
            '–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞–Ω–∞–ª –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø—Ä–∏—ë–º–∞ –∑–∞—è–≤–æ–∫:',
            {
              parse_mode: 'Markdown',
              ...Markup.inlineKeyboard(
                channels.map(channel => ([
                  Markup.button.callback(channel.title, `select_channel:${channel.channelId}`)
                ]))
              )
            }
          );
          return ctx.wizard.selectStep(3);
          
        default:
          await ctx.reply('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏.');
          return;
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –≤ —Å—Ü–µ–Ω–µ –∑–∞—â–∏—Ç—ã (—à–∞–≥ 2):', error);
      await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
      return ctx.scene.leave();
    }
  },
  
  // –®–∞–≥ 3: –í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∏–∑ –ø–æ–¥—Ä–∞–∑–¥–µ–ª–æ–≤
  async (ctx) => {
    try {
      if (ctx.message && ctx.message.text === 'üîô –ö –∑–∞—â–∏—Ç–µ –∏ –ø—Ä–∏—ë–º—É') {
        return ctx.wizard.selectStep(0);
      }
      
      await ctx.reply('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏.');
      return;
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –≤ —Å—Ü–µ–Ω–µ –∑–∞—â–∏—Ç—ã (—à–∞–≥ 3):', error);
      await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
      return ctx.scene.leave();
    }
  },
  
  // –®–∞–≥ 4: –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∞–≤—Ç–æ–ø—Ä–∏—ë–º–∞ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –∫–∞–Ω–∞–ª–∞
  async (ctx) => {
    try {
      if (ctx.callbackQuery) {
        const callbackData = ctx.callbackQuery.data;
        
        if (callbackData.startsWith('select_channel:')) {
          const channelId = callbackData.split(':')[1];
          const userId = ctx.from.id;
          ctx.wizard.state.channelId = channelId;
          
          // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
          const settings = await protectionService.getSettings(userId, channelId);
          
          // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ç–∞–π–º–µ—Ä–∞ –∞–≤—Ç–æ–ø—Ä–∏—ë–º–∞
          await ctx.answerCbQuery();
          await ctx.reply(
            '‚è± *–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–∞–π–º–µ—Ä–∞ –∞–≤—Ç–æ–ø—Ä–∏—ë–º–∞*\n\n' +
            '–í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è, —á–µ—Ä–µ–∑ –∫–æ—Ç–æ—Ä–æ–µ –±–æ—Ç –±—É–¥–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–∏–Ω–∏–º–∞—Ç—å –∑–∞—è–≤–∫–∏ –Ω–∞ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ –≤ –∫–∞–Ω–∞–ª:',
            {
              parse_mode: 'Markdown',
              ...Markup.inlineKeyboard([
                [
                  Markup.button.callback('5 –º–∏–Ω', 'set_timer:5'),
                  Markup.button.callback('15 –º–∏–Ω', 'set_timer:15'),
                  Markup.button.callback('30 –º–∏–Ω', 'set_timer:30')
                ],
                [
                  Markup.button.callback('1 —á–∞—Å', 'set_timer:60'),
                  Markup.button.callback('2 —á–∞—Å–∞', 'set_timer:120'),
                  Markup.button.callback('4 —á–∞—Å–∞', 'set_timer:240')
                ],
                [
                  Markup.button.callback('–û—Ç–∫–ª—é—á–∏—Ç—å –∞–≤—Ç–æ–ø—Ä–∏—ë–º', 'set_timer:0')
                ]
              ])
            }
          );
          return ctx.wizard.next();
        }
      }
      
      await ctx.reply('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∫–∞–Ω–∞–ª –∏–∑ —Å–ø–∏—Å–∫–∞.', {
        ...Markup.keyboard([
          ['üîô –ö –∑–∞—â–∏—Ç–µ –∏ –ø—Ä–∏—ë–º—É']
        ]).resize()
      });
      return ctx.wizard.selectStep(3);
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –≤ —Å—Ü–µ–Ω–µ –∑–∞—â–∏—Ç—ã (—à–∞–≥ 4):', error);
      await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
      return ctx.scene.leave();
    }
  },
  
  // –®–∞–≥ 5: –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ç–∞–π–º–µ—Ä–∞ –∞–≤—Ç–æ–ø—Ä–∏—ë–º–∞
  async (ctx) => {
    try {
      if (ctx.callbackQuery) {
        const callbackData = ctx.callbackQuery.data;
        
        if (callbackData.startsWith('set_timer:')) {
          const timer = parseInt(callbackData.split(':')[1]);
          const userId = ctx.from.id;
          const channelId = ctx.wizard.state.channelId;
          
          // –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ç–∞–π–º–µ—Ä–∞
          await protectionService.updateAutoApprovalTimer(userId, channelId, timer);
          
          let successMessage;
          if (timer === 0) {
            successMessage = '‚úÖ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø—Ä–∏—ë–º –∑–∞—è–≤–æ–∫ –æ—Ç–∫–ª—é—á–µ–Ω.';
          } else {
            let timerText = '';
            if (timer < 60) {
              timerText = `${timer} –º–∏–Ω—É—Ç`;
            } else {
              timerText = `${timer / 60} —á–∞—Å(–æ–≤)`;
            }
            successMessage = `‚úÖ –¢–∞–π–º–µ—Ä –∞–≤—Ç–æ–ø—Ä–∏—ë–º–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∞ ${timerText}.\n\n–ë–æ—Ç –±—É–¥–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–∏–Ω–∏–º–∞—Ç—å –∑–∞—è–≤–∫–∏ –Ω–∞ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ –≤ –∫–∞–Ω–∞–ª —á–µ—Ä–µ–∑ —É–∫–∞–∑–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è.`;
          }
          
          await ctx.answerCbQuery('–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã');
          await ctx.reply(successMessage, {
            ...Markup.keyboard([
              ['üîô –ö –∑–∞—â–∏—Ç–µ –∏ –ø—Ä–∏—ë–º—É']
            ]).resize()
          });
          
          // –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –ø—Ä–∏–µ–º –∑–∞—è–≤–æ–∫ –≤ –∫–∞–Ω–∞–ª–µ (–∏–º–∏—Ç–∞—Ü–∏—è)
          if (timer > 0) {
            await ctx.reply(
              'üîê *–ê–≤—Ç–æ–ø—Ä–∏—ë–º –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω*\n\n' +
              `–ë–æ—Ç —Ç–µ–ø–µ—Ä—å –±—É–¥–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–∏–Ω–∏–º–∞—Ç—å –∑–∞—è–≤–∫–∏ –Ω–∞ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ –≤ –∫–∞–Ω–∞–ª —á–µ—Ä–µ–∑ ${timer < 60 ? `${timer} –º–∏–Ω—É—Ç` : `${timer / 60} —á–∞—Å(–æ–≤)`}.`,
              { parse_mode: 'Markdown' }
            );
          }
          
          return ctx.wizard.selectStep(3);
        }
      }
      
      await ctx.reply('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤.', {
        ...Markup.keyboard([
          ['üîô –ö –∑–∞—â–∏—Ç–µ –∏ –ø—Ä–∏—ë–º—É']
        ]).resize()
      });
      return;
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –≤ —Å—Ü–µ–Ω–µ –∑–∞—â–∏—Ç—ã (—à–∞–≥ 5):', error);
      await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
      return ctx.scene.leave();
    }
  }
);

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π
protectionScene.action(/select_channel:(.+)/, (ctx) => {
  // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è –≤ —à–∞–≥–µ 4
  return;
});

protectionScene.action(/set_timer:(.+)/, (ctx) => {
  // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è –≤ —à–∞–≥–µ 5
  return;
});

module.exports = protectionScene; 