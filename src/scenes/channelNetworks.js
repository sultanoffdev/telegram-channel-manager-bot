const { Scenes, Markup } = require('telegraf');
const channelNetworkService = require('../services/channelNetworkService');
const channelService = require('../services/channelService');
const moment = require('moment-timezone');
const { handleError } = require('../utils/errorHandler');

// Create a scene for managing channel networks
const channelNetworksScene = new Scenes.WizardScene(
  'channelNetworks',
  // Step 1: Display channel networks menu and options
  async (ctx) => {
    const userId = ctx.from.id;
    
    try {
      const userChannels = await channelService.getUserChannels(userId);
      
      if (userChannels.length === 0) {
        await ctx.reply('–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤. –°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤—å—Ç–µ –∫–∞–Ω–∞–ª—ã –≤ —Ä–∞–∑–¥–µ–ª–µ "–ú–æ–∏ –∫–∞–Ω–∞–ª—ã".');
        return ctx.scene.leave();
      }
      
      await ctx.reply(
        'üîÑ *–°–µ—Ç–∏ –∫–∞–Ω–∞–ª–æ–≤*\n\n' +
        '–£–ø—Ä–∞–≤–ª—è–π—Ç–µ –≤–∞—à–∏–º–∏ —Å–µ—Ç—è–º–∏ –∫–∞–Ω–∞–ª–æ–≤ –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–æ—Å—Ç–∏–Ω–≥–∞ –∏ –∞–Ω–∞–ª–∏–∑–∞.',
        {
          parse_mode: 'Markdown',
          ...Markup.keyboard([
            ['üìä –ú–æ–∏ —Å–µ—Ç–∏', '‚ûï –°–æ–∑–¥–∞—Ç—å —Å–µ—Ç—å'],
            ['üîô –ù–∞–∑–∞–¥']
          ]).resize()
        }
      );
      
      return ctx.wizard.next();
    } catch (error) {
      console.error('Error in channel networks scene:', error);
      await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö –æ –∫–∞–Ω–∞–ª–∞—Ö. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
      return ctx.scene.leave();
    }
  },
  
  // Step 2: Handle user actions
  async (ctx) => {
    const userId = ctx.from.id;
    
    if (ctx.message && ctx.message.text === 'üîô –ù–∞–∑–∞–¥') {
      await displayMainMenu(ctx);
      return ctx.scene.leave();
    }
    
    if (ctx.message && ctx.message.text === 'üìä –ú–æ–∏ —Å–µ—Ç–∏') {
      // Placeholder for listing user's channel networks
      await ctx.reply(
        'üîÑ *–í–∞—à–∏ —Å–µ—Ç–∏ –∫–∞–Ω–∞–ª–æ–≤*\n\n' +
        '–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö —Å–µ—Ç–µ–π –∫–∞–Ω–∞–ª–æ–≤.\n' +
        '–°–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—É—é —Å–µ—Ç—å, –Ω–∞–∂–∞–≤ "‚ûï –°–æ–∑–¥–∞—Ç—å —Å–µ—Ç—å".',
        {
          parse_mode: 'Markdown'
        }
      );
      return;
    }
    
    if (ctx.message && ctx.message.text === '‚ûï –°–æ–∑–¥–∞—Ç—å —Å–µ—Ç—å') {
      try {
        const userChannels = await channelService.getUserChannels(userId);
        
        if (userChannels.length < 2) {
          await ctx.reply('–î–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å–µ—Ç–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∏–º–µ—Ç—å –∫–∞–∫ –º–∏–Ω–∏–º—É–º 2 –∫–∞–Ω–∞–ª–∞. –î–æ–±–∞–≤—å—Ç–µ –±–æ–ª—å—à–µ –∫–∞–Ω–∞–ª–æ–≤ –≤ —Ä–∞–∑–¥–µ–ª–µ "–ú–æ–∏ –∫–∞–Ω–∞–ª—ã".');
          return;
        }
        
        ctx.wizard.state.creatingNetwork = true;
        ctx.wizard.state.selectedChannels = [];
        
        const channelButtons = userChannels.map(channel => 
          Markup.button.callback(channel.title, `select_channel:${channel.id}`)
        );
        
        await ctx.reply(
          'üë• *–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π —Å–µ—Ç–∏ –∫–∞–Ω–∞–ª–æ–≤*\n\n' +
          '–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞–Ω–∞–ª—ã, –∫–æ—Ç–æ—Ä—ã–µ —Ö–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –≤ —Å–µ—Ç—å:',
          {
            parse_mode: 'Markdown',
            ...Markup.inlineKeyboard([
              ...channelButtons.map(button => [button]),
              [Markup.button.callback('‚úÖ –ì–æ—Ç–æ–≤–æ', 'network_channels_done')]
            ])
          }
        );
        
        return ctx.wizard.next();
      } catch (error) {
        console.error('Error getting user channels:', error);
        await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å–ø–∏—Å–∫–∞ –∫–∞–Ω–∞–ª–æ–≤. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
      }
    }
  },
  
  // Step 3: Handle channel selection for network creation
  async (ctx) => {
    // This would handle the callback queries for channel selection
    if (ctx.callbackQuery) {
      const data = ctx.callbackQuery.data;
      
      if (data.startsWith('select_channel:')) {
        const channelId = data.split(':')[1];
        const selectedChannels = ctx.wizard.state.selectedChannels || [];
        
        // Toggle channel selection
        const index = selectedChannels.indexOf(channelId);
        if (index === -1) {
          selectedChannels.push(channelId);
        } else {
          selectedChannels.splice(index, 1);
        }
        
        ctx.wizard.state.selectedChannels = selectedChannels;
        
        await ctx.answerCbQuery(`–ö–∞–Ω–∞–ª ${index === -1 ? '–¥–æ–±–∞–≤–ª–µ–Ω' : '—É–¥–∞–ª–µ–Ω'}`);
        return;
      }
      
      if (data === 'network_channels_done') {
        const selectedChannels = ctx.wizard.state.selectedChannels || [];
        
        if (selectedChannels.length < 2) {
          await ctx.answerCbQuery('–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞–∫ –º–∏–Ω–∏–º—É–º 2 –∫–∞–Ω–∞–ª–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å–µ—Ç–∏');
          return;
        }
        
        await ctx.answerCbQuery();
        await ctx.reply(
          '‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è –≤–∞—à–µ–π –Ω–æ–≤–æ–π —Å–µ—Ç–∏ –∫–∞–Ω–∞–ª–æ–≤:',
          {
            reply_markup: { remove_keyboard: true }
          }
        );
        
        return ctx.wizard.next();
      }
    }
  },
  
  // Step 4: Handle network name input
  async (ctx) => {
    if (!ctx.message || !ctx.message.text) {
      await ctx.reply('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è —Å–µ—Ç–∏ –∫–∞–Ω–∞–ª–æ–≤.');
      return;
    }
    
    const networkName = ctx.message.text;
    const selectedChannels = ctx.wizard.state.selectedChannels || [];
    
    // Here you would save the network to the database
    await ctx.reply(
      '‚úÖ *–°–µ—Ç—å –∫–∞–Ω–∞–ª–æ–≤ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞!*\n\n' +
      `–ù–∞–∑–≤–∞–Ω–∏–µ: ${networkName}\n` +
      `–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞–Ω–∞–ª–æ–≤: ${selectedChannels.length}\n\n` +
      '–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ —É–ø—Ä–∞–≤–ª—è—Ç—å —ç—Ç–æ–π —Å–µ—Ç—å—é –∏ —Å–æ–∑–¥–∞–≤–∞—Ç—å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ—Å—Ç—ã.',
      {
        parse_mode: 'Markdown',
        ...Markup.keyboard([
          ['üìä –ú–æ–∏ —Å–µ—Ç–∏', '‚ûï –°–æ–∑–¥–∞—Ç—å —Å–µ—Ç—å'],
          ['üîô –ù–∞–∑–∞–¥']
        ]).resize()
      }
    );
    
    ctx.wizard.state = {};
    return ctx.wizard.selectStep(1);
  }
);

// Register action handlers
channelNetworksScene.action(/select_channel:(.+)/, (ctx) => {
  // This is handled in step 3
  return;
});

channelNetworksScene.action('network_channels_done', (ctx) => {
  // This is handled in step 3
  return;
});

// Helper function to display the main menu
async function displayMainMenu(ctx) {
  await ctx.reply(
    'ü§ñ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é',
    {
      parse_mode: 'Markdown',
      ...Markup.keyboard([
        ['üìù –ü–æ—Å—Ç–∏–Ω–≥', 'üìÖ –ö–∞–ª–µ–Ω–¥–∞—Ä—å'],
        ['üì¢ –ú–æ–∏ –∫–∞–Ω–∞–ª—ã', 'üîç –°–∫–∞–Ω–∏–Ω–≥'],
        ['üí∞ –ó–∞–∫—É–ø—ã', 'üíµ –§–∏–Ω–∞–Ω—Å—ã'],
        ['üõ° –ó–∞—â–∏—Ç–∞ –∏ –ü—Ä–∏—ë–º', 'üîÑ –°–µ—Ç–∏ –∫–∞–Ω–∞–ª–æ–≤'],
        ['‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏']
      ]).resize()
    }
  );
}

module.exports = channelNetworksScene; 