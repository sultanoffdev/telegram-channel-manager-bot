const { Scenes } = require('telegraf');
const { Markup } = require('telegraf');
const schedule = require('node-schedule');
const { Post } = require('../models/post');
const { User } = require('../models/user');

const postingScene = new Scenes.WizardScene(
  'posting',
  // –®–∞–≥ 1: –í—ã–±–æ—Ä –¥–µ–π—Å—Ç–≤–∏—è
  async (ctx) => {
    try {
      await ctx.reply(
        'üìù –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ—Å—Ç–∞–º–∏\n\n' +
        '–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:',
        Markup.keyboard([
          ['üìÑ –ö–æ–Ω—Ç–µ–Ω—Ç–Ω—ã–π –ø–æ—Å—Ç', 'üì£ –†–µ–∫–ª–∞–º–Ω—ã–π –ø–æ—Å—Ç'],
          ['‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ—Å—Ç', 'üìÖ –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ—Å—Ç—ã'],
          ['üîô –ù–∞–∑–∞–¥']
        ]).resize()
      );
      return ctx.wizard.next();
    } catch (error) {
      console.error('Error in posting scene step 1:', error);
      await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
      return ctx.scene.leave();
    }
  },
  // –®–∞–≥ 2: –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –¥–µ–π—Å—Ç–≤–∏—è
  async (ctx) => {
    try {
      if (ctx.message.text === 'üîô –ù–∞–∑–∞–¥') {
        return ctx.scene.leave();
      }

      if (ctx.message.text === 'üìÑ –ö–æ–Ω—Ç–µ–Ω—Ç–Ω—ã–π –ø–æ—Å—Ç' || ctx.message.text === 'üì£ –†–µ–∫–ª–∞–º–Ω—ã–π –ø–æ—Å—Ç') {
        const user = await User.findOne({ telegramId: ctx.from.id });
        const channels = user?.channels || [];
        
        if (channels.length === 0) {
          await ctx.reply('–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤. –î–æ–±–∞–≤—å—Ç–µ –∫–∞–Ω–∞–ª –≤ —Ä–∞–∑–¥–µ–ª–µ "–ú–æ–∏ –∫–∞–Ω–∞–ª—ã"');
          return ctx.scene.leave();
        }

        // –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–∞–Ω–∞–ª–∞–º–∏ –∏ –æ–ø—Ü–∏–µ–π "–í—ã–±—Ä–∞—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ"
        const keyboard = [
          ...channels.map(channel => [Markup.button.callback(channel.title, `channel_${channel.id}`)]),
          [Markup.button.callback('üì¢ –í—ã–±—Ä–∞—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –∫–∞–Ω–∞–ª–æ–≤', 'select_multiple')]
        ];

        await ctx.reply(
          '1Ô∏è‚É£ –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞–Ω–∞–ª –∏–ª–∏ —Å–µ—Ç—å –∫–∞–Ω–∞–ª–æ–≤ –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏:',
          Markup.inlineKeyboard(keyboard)
        );
        
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –ø–æ—Å—Ç–∞ (–∫–æ–Ω—Ç–µ–Ω—Ç–Ω—ã–π –∏–ª–∏ —Ä–µ–∫–ª–∞–º–Ω—ã–π)
        ctx.session.postType = 'new';
        ctx.session.contentType = ctx.message.text === 'üìÑ –ö–æ–Ω—Ç–µ–Ω—Ç–Ω—ã–π –ø–æ—Å—Ç' ? 'content' : 'ad';
        return ctx.wizard.next();
      }

      if (ctx.message.text === '‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ—Å—Ç') {
        const posts = await Post.find({
          userId: ctx.from.id,
          status: 'scheduled'
        }).sort({ scheduleTime: 1 });

        if (posts.length === 0) {
          await ctx.reply('–£ –≤–∞—Å –Ω–µ—Ç –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.');
          return ctx.wizard.selectStep(0);
        }

        const keyboard = posts.map(post => {
          const date = new Date(post.scheduleTime);
          const dateStr = date.toLocaleString('ru-RU');
          const contentType = post.tags && post.tags.includes('ad') ? 'üì£ –†–µ–∫–ª–∞–º–∞' : 'üìÑ –ö–æ–Ω—Ç–µ–Ω—Ç';
          return [Markup.button.callback(`${dateStr} - ${contentType} - ${post.content.text?.substring(0, 20) || '–ú–µ–¥–∏–∞ –∫–æ–Ω—Ç–µ–Ω—Ç'}...`, `edit_post_${post._id}`)];
        });

        await ctx.reply(
          '–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ—Å—Ç –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:',
          Markup.inlineKeyboard(keyboard)
        );
        ctx.session.postType = 'edit';
        return ctx.wizard.next();
      }

      if (ctx.message.text === 'üìÖ –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ—Å—Ç—ã') {
        const posts = await Post.find({
          userId: ctx.from.id,
          status: 'scheduled'
        }).sort({ scheduleTime: 1 });

        if (posts.length === 0) {
          await ctx.reply('–£ –≤–∞—Å –Ω–µ—Ç –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤.');
          return ctx.wizard.selectStep(0);
        }

        let message = 'üìÖ –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ—Å—Ç—ã:\n\n';
        posts.forEach((post, index) => {
          const date = new Date(post.scheduleTime);
          const contentType = post.tags && post.tags.includes('ad') ? 'üì£ –†–µ–∫–ª–∞–º–∞' : 'üìÑ –ö–æ–Ω—Ç–µ–Ω—Ç';
          message += `${index + 1}. ${date.toLocaleString('ru-RU')} - ${contentType}\n`;
          message += `–ö–∞–Ω–∞–ª—ã: ${post.channelId.length}\n`;
          if (post.content.text) {
            message += `–¢–µ–∫—Å—Ç: ${post.content.text.substring(0, 50)}${post.content.text.length > 50 ? '...' : ''}\n`;
          } else {
            message += `–ö–æ–Ω—Ç–µ–Ω—Ç: –ú–µ–¥–∏–∞\n`;
          }
          message += `–ú–µ—Ç–∫–∏: ${post.tags ? post.tags.join(', ') : '–ù–µ—Ç'}\n\n`;
        });

        await ctx.reply(message);
        return ctx.wizard.selectStep(0);
      }

      await ctx.reply('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é.');
      return ctx.wizard.selectStep(0);
    } catch (error) {
      console.error('Error in posting scene step 2:', error);
      await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
      return ctx.scene.leave();
    }
  },
  // –®–∞–≥ 3: –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
  async (ctx) => {
    try {
      if (ctx.session.postType === 'new') {
        if (ctx.callbackQuery) {
          if (ctx.callbackQuery.data === 'select_multiple') {
            const user = await User.findOne({ telegramId: ctx.from.id });
            const channels = user?.channels || [];
            
            const keyboard = channels.map(channel => [
              Markup.button.callback(
                channel.title + (ctx.session.selectedChannels?.includes(channel.id) ? ' ‚úÖ' : ''),
                `toggle_${channel.id}`
              )
            ]);
            keyboard.push([Markup.button.callback('‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –≤—ã–±–æ—Ä', 'confirm_channels')]);

            await ctx.editMessageText(
              '1Ô∏è‚É£ –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞–Ω–∞–ª—ã –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏:',
              Markup.inlineKeyboard(keyboard)
            );
            return;
          }

          if (ctx.callbackQuery.data === 'confirm_channels') {
            if (!ctx.session.selectedChannels?.length) {
              await ctx.reply('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –∫–∞–Ω–∞–ª.');
              return;
            }
          } else if (ctx.callbackQuery.data.startsWith('toggle_')) {
            const channelId = ctx.callbackQuery.data.replace('toggle_', '');
            ctx.session.selectedChannels = ctx.session.selectedChannels || [];
            
            const index = ctx.session.selectedChannels.indexOf(channelId);
            if (index === -1) {
              ctx.session.selectedChannels.push(channelId);
            } else {
              ctx.session.selectedChannels.splice(index, 1);
            }

            const user = await User.findOne({ telegramId: ctx.from.id });
            const channels = user?.channels || [];
            
            const keyboard = channels.map(channel => [
              Markup.button.callback(
                channel.title + (ctx.session.selectedChannels.includes(channel.id) ? ' ‚úÖ' : ''),
                `toggle_${channel.id}`
              )
            ]);
            keyboard.push([Markup.button.callback('‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –≤—ã–±–æ—Ä', 'confirm_channels')]);

            await ctx.editMessageText(
              '1Ô∏è‚É£ –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞–Ω–∞–ª—ã –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏:',
              Markup.inlineKeyboard(keyboard)
            );
            return;
          } else {
            ctx.session.selectedChannels = [ctx.callbackQuery.data.replace('channel_', '')];
          }

          // –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –ø–æ—Å—Ç–∞
          let message = '2Ô∏è‚É£ –û—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–Ω—Ç–µ–Ω—Ç –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏:\n\n';
          
          if (ctx.session.contentType === 'content') {
            message += 'üìÑ –ö–æ–Ω—Ç–µ–Ω—Ç–Ω—ã–π –ø–æ—Å—Ç –º–æ–∂–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å:\n' +
                      '- –¢–µ–∫—Å—Ç\n' +
                      '- –§–æ—Ç–æ\n' +
                      '- –í–∏–¥–µ–æ\n' +
                      '- –î–æ–∫—É–º–µ–Ω—Ç\n' +
                      '- –û–ø—Ä–æ—Å\n' +
                      '- –ò–ª–∏ –∏—Ö –∫–æ–º–±–∏–Ω–∞—Ü–∏—é';
          } else if (ctx.session.contentType === 'ad') {
            message += 'üì£ –†–µ–∫–ª–∞–º–Ω—ã–π –ø–æ—Å—Ç –º–æ–∂–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å:\n' +
                      '- –¢–µ–∫—Å—Ç —Å —Å—Å—ã–ª–∫–∞–º–∏/—Ö—ç—à—Ç–µ–≥–∞–º–∏\n' +
                      '- –§–æ—Ç–æ —Å –ø–æ–¥–ø–∏—Å—å—é\n' +
                      '- –í–∏–¥–µ–æ —Å –ø–æ–¥–ø–∏—Å—å—é\n' +
                      '- –ö–Ω–æ–ø–∫–∏ –∏ –¥—Ä—É–≥–∏–µ —ç–ª–µ–º–µ–Ω—Ç—ã –¥–ª—è –ø—Ä–æ–¥–≤–∏–∂–µ–Ω–∏—è';
          }
          
          await ctx.reply(message);
          return ctx.wizard.next();
        }
      } else if (ctx.session.postType === 'edit') {
        if (ctx.callbackQuery) {
          const postId = ctx.callbackQuery.data.replace('edit_post_', '');
          const post = await Post.findById(postId);
          
          if (!post) {
            await ctx.reply('–ü–æ—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.');
            return ctx.wizard.selectStep(0);
          }

          ctx.session.editingPost = post;
          ctx.session.selectedChannels = post.channelId;
          ctx.session.contentType = post.tags && post.tags.includes('ad') ? 'ad' : 'content';
          
          await ctx.reply(
            '‚úèÔ∏è –û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç –¥–ª—è –ø–æ—Å—Ç–∞:\n\n' +
            '- –¢–µ–∫—Å—Ç\n' +
            '- –§–æ—Ç–æ\n' +
            '- –í–∏–¥–µ–æ\n' +
            '- –î–æ–∫—É–º–µ–Ω—Ç\n' +
            '- –û–ø—Ä–æ—Å\n' +
            '- –ò–ª–∏ –∏—Ö –∫–æ–º–±–∏–Ω–∞—Ü–∏—é'
          );
          return ctx.wizard.next();
        }
      }

      await ctx.reply('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∫–∞–Ω–∞–ª –∏–ª–∏ –¥–µ–π—Å—Ç–≤–∏–µ.');
      return ctx.wizard.selectStep(1);
    } catch (error) {
      console.error('Error in posting scene step 3:', error);
      await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
      return ctx.scene.leave();
    }
  },
  // –®–∞–≥ 4: –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
  async (ctx) => {
    try {
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç –ø–æ—Å—Ç–∞
      ctx.session.content = ctx.message;
      
      // –î–æ–±–∞–≤–ª—è–µ–º –º–µ—Ç–∫—É –æ —Ç–∏–ø–µ –ø–æ—Å—Ç–∞ –µ—Å–ª–∏ —ç—Ç–æ –Ω–æ–≤—ã–π –ø–æ—Å—Ç
      if (ctx.session.postType === 'new') {
        ctx.session.tags = ctx.session.tags || [];
        if (ctx.session.contentType === 'ad' && !ctx.session.tags.includes('ad')) {
          ctx.session.tags.push('ad');
        }
      }

      const keyboard = Markup.inlineKeyboard([
        [
          Markup.button.callback('üè∑ –î–æ–±–∞–≤–∏—Ç—å –º–µ—Ç–∫–∏', 'add_tags'),
          Markup.button.callback('‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏', 'settings')
        ],
        [
          Markup.button.callback('üìù –û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å —Å–µ–π—á–∞—Å', 'publish_now'),
          Markup.button.callback('üìÖ –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å', 'schedule')
        ]
      ]);

      await ctx.reply(
        '3Ô∏è‚É£ –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ —Å –ø–æ—Å—Ç–æ–º:',
        keyboard
      );
      return ctx.wizard.next();
    } catch (error) {
      console.error('Error in posting scene step 4:', error);
      await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
      return ctx.scene.leave();
    }
  },
  // –®–∞–≥ 5: –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–µ–π—Å—Ç–≤–∏–π —Å –ø–æ—Å—Ç–æ–º
  async (ctx) => {
    try {
      if (!ctx.callbackQuery) {
        await ctx.reply('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é.');
        return;
      }

      const action = ctx.callbackQuery.data;

      if (action === 'add_tags') {
        await ctx.reply(
          '–í–≤–µ–¥–∏—Ç–µ –º–µ—Ç–∫–∏ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é (–Ω–∞–ø—Ä–∏–º–µ—Ä: #—Ä–µ–∫–ª–∞–º–∞, #–∞–Ω–æ–Ω—Å, #–Ω–æ–≤–æ—Å—Ç—å)'
        );
        ctx.session.awaitingTags = true;
        return;
      }

      if (action === 'settings') {
        // –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –ø–æ—Å—Ç–∞
        let settingsKeyboard = [];
        
        // –û–±—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –≤—Å–µ—Ö —Ç–∏–ø–æ–≤ –ø–æ—Å—Ç–æ–≤
        settingsKeyboard.push([
          Markup.button.callback('üîÅ –ê–≤—Ç–æ–ø–æ–≤—Ç–æ—Ä', 'toggle_repeat'),
          Markup.button.callback('üîï –ë–µ–∑ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è', 'toggle_silent')
        ]);
        
        // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –∫–æ–Ω—Ç–µ–Ω—Ç–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤
        if (ctx.session.contentType === 'content') {
          settingsKeyboard.push([
            Markup.button.callback('üìä –ó–∞—â–∏—Ç–∞ –æ—Ç –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è', 'toggle_protection')
          ]);
        }
        
        // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è —Ä–µ–∫–ª–∞–º–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤
        if (ctx.session.contentType === 'ad') {
          settingsKeyboard.push([
            Markup.button.callback('üîó –ö–Ω–æ–ø–∫–∏', 'add_buttons')
          ]);
        }
        
        settingsKeyboard.push([Markup.button.callback('‚úÖ –ì–æ—Ç–æ–≤–æ', 'settings_done')]);

        // –°–æ–∑–¥–∞–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è —Å —Ç–µ–∫—É—â–∏–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
        let settingsText = '‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏:\n\n';
        settingsText += `üîÅ –ê–≤—Ç–æ–ø–æ–≤—Ç–æ—Ä: ${ctx.session.settings?.repeat ? '‚úÖ' : '‚ùå'}\n`;
        settingsText += `üîï –ë–µ–∑ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: ${ctx.session.settings?.silent ? '‚úÖ' : '‚ùå'}\n`;
        
        if (ctx.session.contentType === 'content') {
          settingsText += `üìä –ó–∞—â–∏—Ç–∞ –æ—Ç –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è: ${ctx.session.settings?.protection ? '‚úÖ' : '‚ùå'}\n`;
        }
        
        if (ctx.session.contentType === 'ad') {
          settingsText += `üîó –ö–Ω–æ–ø–∫–∏: ${ctx.session.settings?.buttons ? '‚úÖ' : '‚ùå'}\n`;
        }

        await ctx.editMessageText(
          settingsText,
          Markup.inlineKeyboard(settingsKeyboard)
        );
        return;
      }

      if (action === 'publish_now') {
        // –ü—É–±–ª–∏–∫—É–µ–º –ø–æ—Å—Ç —Å–µ–π—á–∞—Å
        const postData = {
          userId: ctx.from.id,
          channelId: ctx.session.selectedChannels,
          content: ctx.session.content,
          scheduleTime: new Date(),
          status: 'scheduled',
          tags: ctx.session.tags || [],
          settings: ctx.session.settings || {}
        };

        let post;
        if (ctx.session.postType === 'edit' && ctx.session.editingPost) {
          // –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –ø–æ—Å—Ç
          post = await Post.findByIdAndUpdate(
            ctx.session.editingPost._id,
            { $set: postData },
            { new: true }
          );
        } else {
          // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –ø–æ—Å—Ç
          post = new Post(postData);
          await post.save();
        }

        // –ü—É–±–ª–∏–∫—É–µ–º –≤ –∫–∞–∂–¥—ã–π –≤—ã–±—Ä–∞–Ω–Ω—ã–π –∫–∞–Ω–∞–ª
        for (const channelId of ctx.session.selectedChannels) {
          try {
            if (ctx.session.content.photo) {
              // –û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–æ—Ç–æ
              await ctx.telegram.sendPhoto(channelId, ctx.session.content.photo[0].file_id, {
                caption: ctx.session.content.caption || '',
                parse_mode: 'HTML',
                disable_notification: ctx.session.settings?.silent
              });
            } else if (ctx.session.content.video) {
              // –û—Ç–ø—Ä–∞–≤–∫–∞ –≤–∏–¥–µ–æ
              await ctx.telegram.sendVideo(channelId, ctx.session.content.video.file_id, {
                caption: ctx.session.content.caption || '',
                parse_mode: 'HTML',
                disable_notification: ctx.session.settings?.silent
              });
            } else if (ctx.session.content.document) {
              // –û—Ç–ø—Ä–∞–≤–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞
              await ctx.telegram.sendDocument(channelId, ctx.session.content.document.file_id, {
                caption: ctx.session.content.caption || '',
                parse_mode: 'HTML',
                disable_notification: ctx.session.settings?.silent
              });
            } else if (ctx.session.content.text) {
              // –û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ–∫—Å—Ç–∞
              await ctx.telegram.sendMessage(channelId, ctx.session.content.text, {
                parse_mode: 'HTML',
                disable_notification: ctx.session.settings?.silent
              });
            }
          } catch (error) {
            console.error(`Error publishing to channel ${channelId}:`, error);
          }
        }

        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ—Å—Ç–∞ –Ω–∞ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω—ã–π
        await Post.findByIdAndUpdate(post._id, { status: 'published' });

        await ctx.reply('‚úÖ –ü–æ—Å—Ç —É—Å–ø–µ—à–Ω–æ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω!');
        return ctx.scene.leave();
      }

      if (action === 'schedule') {
        await ctx.reply(
          '–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì –ß–ß:–ú–ú\n' +
          '–ù–∞–ø—Ä–∏–º–µ—Ä: 25.04.2024 15:30'
        );
        ctx.session.awaitingSchedule = true;
        return;
      }

      // –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫
      if (action.startsWith('toggle_')) {
        ctx.session.settings = ctx.session.settings || {};
        const setting = action.replace('toggle_', '');
        ctx.session.settings[setting] = !ctx.session.settings[setting];

        // –§–æ—Ä–º–∏—Ä—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –ø–æ—Å—Ç–∞
        let settingsKeyboard = [];
        
        settingsKeyboard.push([
          Markup.button.callback('üîÅ –ê–≤—Ç–æ–ø–æ–≤—Ç–æ—Ä', 'toggle_repeat'),
          Markup.button.callback('üîï –ë–µ–∑ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è', 'toggle_silent')
        ]);
        
        if (ctx.session.contentType === 'content') {
          settingsKeyboard.push([
            Markup.button.callback('üìä –ó–∞—â–∏—Ç–∞ –æ—Ç –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è', 'toggle_protection')
          ]);
        }
        
        if (ctx.session.contentType === 'ad') {
          settingsKeyboard.push([
            Markup.button.callback('üîó –ö–Ω–æ–ø–∫–∏', 'add_buttons')
          ]);
        }
        
        settingsKeyboard.push([Markup.button.callback('‚úÖ –ì–æ—Ç–æ–≤–æ', 'settings_done')]);

        // –°–æ–∑–¥–∞–µ–º —Ç–µ–∫—Å—Ç —Å —Ç–µ–∫—É—â–∏–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
        let settingsText = '‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏:\n\n';
        settingsText += `üîÅ –ê–≤—Ç–æ–ø–æ–≤—Ç–æ—Ä: ${ctx.session.settings.repeat ? '‚úÖ' : '‚ùå'}\n`;
        settingsText += `üîï –ë–µ–∑ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: ${ctx.session.settings.silent ? '‚úÖ' : '‚ùå'}\n`;
        
        if (ctx.session.contentType === 'content') {
          settingsText += `üìä –ó–∞—â–∏—Ç–∞ –æ—Ç –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è: ${ctx.session.settings.protection ? '‚úÖ' : '‚ùå'}\n`;
        }
        
        if (ctx.session.contentType === 'ad') {
          settingsText += `üîó –ö–Ω–æ–ø–∫–∏: ${ctx.session.settings.buttons ? '‚úÖ' : '‚ùå'}\n`;
        }

        await ctx.editMessageText(
          settingsText,
          Markup.inlineKeyboard(settingsKeyboard)
        );
        return;
      }

      if (action === 'settings_done') {
        const keyboard = Markup.inlineKeyboard([
          [
            Markup.button.callback('üìù –û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å —Å–µ–π—á–∞—Å', 'publish_now'),
            Markup.button.callback('üìÖ –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å', 'schedule')
          ]
        ]);

        await ctx.editMessageText(
          '3Ô∏è‚É£ –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ —Å –ø–æ—Å—Ç–æ–º:',
          keyboard
        );
        return;
      }

    } catch (error) {
      console.error('Error in posting scene step 5:', error);
      await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
      return ctx.scene.leave();
    }
  }
);

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è —Ç–µ–≥–æ–≤ –∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
postingScene.on('text', async (ctx) => {
  try {
    if (ctx.session.awaitingTags) {
      ctx.session.tags = ctx.message.text.split(',').map(tag => tag.trim());
      
      // –î–æ–±–∞–≤–ª—è–µ–º –º–µ—Ç–∫—É –æ —Ç–∏–ø–µ –ø–æ—Å—Ç–∞, –µ—Å–ª–∏ –æ–Ω–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç
      if (ctx.session.contentType === 'ad' && !ctx.session.tags.includes('ad')) {
        ctx.session.tags.push('ad');
      }
      
      ctx.session.awaitingTags = false;

      const keyboard = Markup.inlineKeyboard([
        [
          Markup.button.callback('üìù –û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å —Å–µ–π—á–∞—Å', 'publish_now'),
          Markup.button.callback('üìÖ –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å', 'schedule')
        ]
      ]);

      await ctx.reply(
        `‚úÖ –ú–µ—Ç–∫–∏ –¥–æ–±–∞–≤–ª–µ–Ω—ã: ${ctx.session.tags.join(', ')}\n\n` +
        '–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:',
        keyboard
      );
      return;
    }

    if (ctx.session.awaitingSchedule) {
      const scheduleTime = ctx.message.text;
      const [datePart, timePart] = scheduleTime.split(' ');
      const [day, month, year] = datePart.split('.');
      const [hours, minutes] = timePart.split(':');
      
      const jobDate = new Date(year, month - 1, day, hours, minutes);

      if (isNaN(jobDate.getTime())) {
        await ctx.reply('‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì –ß–ß:–ú–ú');
        return;
      }

      if (jobDate <= new Date()) {
        await ctx.reply('‚ùå –î–∞—Ç–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –≤ –±—É–¥—É—â–µ–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');
        return;
      }

      // –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ—Å—Ç–∞
      const postData = {
        userId: ctx.from.id,
        channelId: ctx.session.selectedChannels,
        content: ctx.session.content,
        scheduleTime: jobDate,
        status: 'scheduled',
        tags: ctx.session.tags || [],
        settings: ctx.session.settings || {}
      };

      let post;
      if (ctx.session.postType === 'edit' && ctx.session.editingPost) {
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –ø–æ—Å—Ç
        post = await Post.findByIdAndUpdate(
          ctx.session.editingPost._id,
          { $set: postData },
          { new: true }
        );
        
        // –û—Ç–º–µ–Ω—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ, –µ—Å–ª–∏ –æ–Ω–æ –±—ã–ª–æ
        const jobName = `post_${ctx.session.editingPost._id}`;
        const existingJob = schedule.scheduledJobs[jobName];
        if (existingJob) {
          existingJob.cancel();
        }
      } else {
        // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –ø–æ—Å—Ç
        post = new Post(postData);
        await post.save();
      }

      // –ü–ª–∞–Ω–∏—Ä—É–µ–º –ø—É–±–ª–∏–∫–∞—Ü–∏—é —Å —É–Ω–∏–∫–∞–ª—å–Ω—ã–º –∏–º–µ–Ω–µ–º –∑–∞–¥–∞—á–∏
      const jobName = `post_${post._id}`;
      schedule.scheduleJob(jobName, jobDate, async () => {
        try {
          for (const channelId of post.channelId) {
            try {
              if (post.content.photo) {
                // –û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–æ—Ç–æ
                await ctx.telegram.sendPhoto(channelId, post.content.photo[0].file_id, {
                  caption: post.content.caption || '',
                  parse_mode: 'HTML',
                  disable_notification: post.settings?.silent
                });
              } else if (post.content.video) {
                // –û—Ç–ø—Ä–∞–≤–∫–∞ –≤–∏–¥–µ–æ
                await ctx.telegram.sendVideo(channelId, post.content.video.file_id, {
                  caption: post.content.caption || '',
                  parse_mode: 'HTML',
                  disable_notification: post.settings?.silent
                });
              } else if (post.content.document) {
                // –û—Ç–ø—Ä–∞–≤–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞
                await ctx.telegram.sendDocument(channelId, post.content.document.file_id, {
                  caption: post.content.caption || '',
                  parse_mode: 'HTML',
                  disable_notification: post.settings?.silent
                });
              } else if (post.content.text) {
                // –û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ–∫—Å—Ç–∞
                await ctx.telegram.sendMessage(channelId, post.content.text, {
                  parse_mode: 'HTML',
                  disable_notification: post.settings?.silent
                });
              }
            } catch (channelError) {
              console.error(`Error publishing to channel ${channelId}:`, channelError);
            }
          }
          
          // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ—Å—Ç–∞
          await Post.findByIdAndUpdate(post._id, { status: 'published' });
          
          // –ï—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω –∞–≤—Ç–æ–ø–æ–≤—Ç–æ—Ä, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –ø–æ—Å—Ç –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π –ø–µ—Ä–∏–æ–¥
          if (post.settings?.repeat) {
            // –ë–∞–∑–æ–≤–∞—è –ª–æ–≥–∏–∫–∞ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, —á–µ—Ä–µ–∑ 24 —á–∞—Å–∞)
            const nextDate = new Date(jobDate.getTime() + 24 * 60 * 60 * 1000);
            
            const newPost = new Post({
              ...postData,
              scheduleTime: nextDate
            });
            await newPost.save();
            
            // –ü–ª–∞–Ω–∏—Ä—É–µ–º –ø—É–±–ª–∏–∫–∞—Ü–∏—é –Ω–æ–≤–æ–≥–æ –ø–æ—Å—Ç–∞
            const newJobName = `post_${newPost._id}`;
            schedule.scheduleJob(newJobName, nextDate, /* —Ç–∞–∫–∞—è –∂–µ —Ñ—É–Ω–∫—Ü–∏—è */);
          }
        } catch (error) {
          console.error('Error publishing scheduled post:', error);
          await Post.findByIdAndUpdate(post._id, { status: 'failed' });
        }
      });

      // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–º –ø–æ—Å—Ç–µ
      let postType = ctx.session.contentType === 'ad' ? 'üì£ –†–µ–∫–ª–∞–º–Ω—ã–π' : 'üìÑ –ö–æ–Ω—Ç–µ–Ω—Ç–Ω—ã–π';
      await ctx.reply(
        '‚úÖ –ü–æ—Å—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω!\n\n' +
        `üìÖ –î–∞—Ç–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏: ${jobDate.toLocaleString('ru-RU')}\n` +
        `üì¢ –ö–∞–Ω–∞–ª—ã: ${ctx.session.selectedChannels.length}\n` +
        `üìù –¢–∏–ø: ${postType}\n` +
        (ctx.session.tags && ctx.session.tags.length > 0 ? `üè∑ –ú–µ—Ç–∫–∏: ${ctx.session.tags.join(', ')}\n` : '') +
        '\n–í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ—Å—Ç—ã –≤ —Ä–∞–∑–¥–µ–ª–µ "üìÖ –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ—Å—Ç—ã"'
      );

      ctx.session.awaitingSchedule = false;
      return ctx.scene.leave();
    }
  } catch (error) {
    console.error('Error handling text message:', error);
    await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    return ctx.scene.leave();
  }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ callback-–∑–∞–ø—Ä–æ—Å–æ–≤
postingScene.action(/.*/, async (ctx) => {
  try {
    await ctx.answerCbQuery();
    return ctx.wizard.next();
  } catch (error) {
    console.error('Error in posting scene action:', error);
    await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    return ctx.scene.leave();
  }
});

module.exports = postingScene; 