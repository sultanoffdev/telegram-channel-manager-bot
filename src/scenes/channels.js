const { Scenes } = require('telegraf');
const { Markup } = require('telegraf');
const { Channel } = require('../models/channel');
const { ChannelNetwork } = require('../models/channelNetwork');

const channelsScene = new Scenes.WizardScene(
  'channels',
  // –®–∞–≥ 1: –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∫–∞–Ω–∞–ª–æ–≤ –∏ —Å–µ—Ç–µ–π
  async (ctx) => {
    // –ü–æ–ª—É—á–∞–µ–º –∫–∞–Ω–∞–ª—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const channels = await Channel.find({ userId: ctx.from.id });
    
    // –ü–æ–ª—É—á–∞–µ–º —Å–µ—Ç–∏ –∫–∞–Ω–∞–ª–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const networks = await ChannelNetwork.find({ userId: ctx.from.id });
    
    // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    let message = 'üì¢ *–í–∞—à–∏ –∫–∞–Ω–∞–ª—ã –∏ —Å–µ—Ç–∏ –∫–∞–Ω–∞–ª–æ–≤*\n\n';
    
    // –î–æ–±–∞–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤
    if (channels.length > 0) {
      message += '*–ö–∞–Ω–∞–ª—ã:*\n';
      channels.forEach((channel, index) => {
        message += `${index + 1}. ${channel.title || channel.channelId} (${channel.channelId})\n`;
      });
      message += '\n';
    } else {
      message += '*–ö–∞–Ω–∞–ª—ã:* –ù–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤\n\n';
    }
    
    // –î–æ–±–∞–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ —Å–µ—Ç–µ–π
    if (networks.length > 0) {
      message += '*–°–µ—Ç–∏ –∫–∞–Ω–∞–ª–æ–≤:*\n';
      networks.forEach((network, index) => {
        message += `${index + 1}. ${network.name} (${network.channels.length} –∫–∞–Ω–∞–ª–æ–≤)\n`;
      });
    } else {
      message += '*–°–µ—Ç–∏ –∫–∞–Ω–∞–ª–æ–≤:* –ù–µ—Ç —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö —Å–µ—Ç–µ–π\n';
    }
    
    // –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    const keyboard = [
      [Markup.button.callback('‚ûï –î–æ–±–∞–≤–∏—Ç—å –∫–∞–Ω–∞–ª', 'add_channel')],
      [Markup.button.callback('üîó –°–æ–∑–¥–∞—Ç—å —Å–µ—Ç—å', 'create_network')]
    ];
    
    // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞–Ω–∞–ª–æ–≤, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
    if (channels.length > 0) {
      keyboard.push([Markup.button.callback('üìù –ü–æ—Å—Ç–∏–Ω–≥', 'posting')]);
      keyboard.push([Markup.button.callback('üí∞ –ó–∞–∫—É–ø—ã', 'purchases')]);
    }
    
    // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –≤–æ–∑–≤—Ä–∞—Ç–∞
    keyboard.push([Markup.button.callback('üîô –ù–∞–∑–∞–¥', 'back')]);
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
    await ctx.replyWithMarkdown(message, Markup.inlineKeyboard(keyboard));
    
    return ctx.wizard.next();
  },
  // –®–∞–≥ 2: –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–µ–π—Å—Ç–≤–∏–π —Å –∫–∞–Ω–∞–ª–∞–º–∏ –∏ —Å–µ—Ç—è–º–∏
  async (ctx) => {
    if (ctx.callbackQuery) {
      const action = ctx.callbackQuery.data;
      
      // –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–∞–Ω–∞–ª–∞
      if (action === 'add_channel') {
        await ctx.reply(
          '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ ID –∫–∞–Ω–∞–ª–∞ –∏–ª–∏ —Å—Å—ã–ª–∫—É –Ω–∞ –∫–∞–Ω–∞–ª.\n\n' +
          '–ü—Ä–∏–º–µ—Ä—ã:\n' +
          '- ID: @channel_name\n' +
          '- –°—Å—ã–ª–∫–∞: https://t.me/channel_name'
        );
        ctx.session.action = 'add_channel';
        return ctx.wizard.next();
      }
      
      // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–µ—Ç–∏
      else if (action === 'create_network') {
        // –ü–æ–ª—É—á–∞–µ–º –∫–∞–Ω–∞–ª—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        const channels = await Channel.find({ userId: ctx.from.id });
        
        if (channels.length < 2) {
          await ctx.reply(
            '–î–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å–µ—Ç–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∏–º–µ—Ç—å –∫–∞–∫ –º–∏–Ω–∏–º—É–º 2 –∫–∞–Ω–∞–ª–∞.\n' +
            '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –¥–æ–±–∞–≤—å—Ç–µ –∫–∞–Ω–∞–ª—ã –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.'
          );
          return ctx.wizard.selectStep(0);
        }
        
        // –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–µ—Ç–∏
        await ctx.reply('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è –Ω–æ–≤–æ–π —Å–µ—Ç–∏ –∫–∞–Ω–∞–ª–æ–≤:');
        ctx.session.action = 'create_network_name';
        return ctx.wizard.next();
      }
      
      // –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ—Å—Ç–∏–Ω–≥–∞
      else if (action === 'posting') {
        // –ü–æ–ª—É—á–∞–µ–º –∫–∞–Ω–∞–ª—ã –∏ —Å–µ—Ç–∏
        const channels = await Channel.find({ userId: ctx.from.id });
        const networks = await ChannelNetwork.find({ userId: ctx.from.id });
        
        // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        let message = 'üìù *–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞–Ω–∞–ª –∏–ª–∏ —Å–µ—Ç—å –¥–ª—è –ø–æ—Å—Ç–∏–Ω–≥–∞:*\n\n';
        
        // –î–æ–±–∞–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤
        if (channels.length > 0) {
          message += '*–ö–∞–Ω–∞–ª—ã:*\n';
          channels.forEach((channel, index) => {
            message += `${index + 1}. ${channel.title || channel.channelId} (${channel.channelId})\n`;
          });
          message += '\n';
        }
        
        // –î–æ–±–∞–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ —Å–µ—Ç–µ–π
        if (networks.length > 0) {
          message += '*–°–µ—Ç–∏ –∫–∞–Ω–∞–ª–æ–≤:*\n';
          networks.forEach((network, index) => {
            message += `${index + 1}. ${network.name} (${network.channels.length} –∫–∞–Ω–∞–ª–æ–≤)\n`;
          });
        }
        
        // –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        const keyboard = [];
        
        // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞–Ω–∞–ª–æ–≤
        channels.forEach((channel, index) => {
          keyboard.push([Markup.button.callback(
            `üì¢ ${channel.title || channel.channelId}`,
            `post_channel_${channel._id}`
          )]);
        });
        
        // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è —Å–µ—Ç–µ–π
        networks.forEach((network, index) => {
          keyboard.push([Markup.button.callback(
            `üîó ${network.name}`,
            `post_network_${network._id}`
          )]);
        });
        
        // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –≤–æ–∑–≤—Ä–∞—Ç–∞
        keyboard.push([Markup.button.callback('üîô –ù–∞–∑–∞–¥', 'back_to_channels')]);
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
        await ctx.replyWithMarkdown(message, Markup.inlineKeyboard(keyboard));
        
        return ctx.wizard.next();
      }
      
      // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–∫—É–ø–æ–≤
      else if (action === 'purchases') {
        // –ü–æ–ª—É—á–∞–µ–º –∫–∞–Ω–∞–ª—ã –∏ —Å–µ—Ç–∏
        const channels = await Channel.find({ userId: ctx.from.id });
        const networks = await ChannelNetwork.find({ userId: ctx.from.id });
        
        // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        let message = 'üí∞ *–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞–Ω–∞–ª –∏–ª–∏ —Å–µ—Ç—å –¥–ª—è –∑–∞–∫—É–ø–∞:*\n\n';
        
        // –î–æ–±–∞–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤
        if (channels.length > 0) {
          message += '*–ö–∞–Ω–∞–ª—ã:*\n';
          channels.forEach((channel, index) => {
            message += `${index + 1}. ${channel.title || channel.channelId} (${channel.channelId})\n`;
          });
          message += '\n';
        }
        
        // –î–æ–±–∞–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ —Å–µ—Ç–µ–π
        if (networks.length > 0) {
          message += '*–°–µ—Ç–∏ –∫–∞–Ω–∞–ª–æ–≤:*\n';
          networks.forEach((network, index) => {
            message += `${index + 1}. ${network.name} (${network.channels.length} –∫–∞–Ω–∞–ª–æ–≤)\n`;
          });
        }
        
        // –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        const keyboard = [];
        
        // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞–Ω–∞–ª–æ–≤
        channels.forEach((channel, index) => {
          keyboard.push([Markup.button.callback(
            `üì¢ ${channel.title || channel.channelId}`,
            `purchase_channel_${channel._id}`
          )]);
        });
        
        // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è —Å–µ—Ç–µ–π
        networks.forEach((network, index) => {
          keyboard.push([Markup.button.callback(
            `üîó ${network.name}`,
            `purchase_network_${network._id}`
          )]);
        });
        
        // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –≤–æ–∑–≤—Ä–∞—Ç–∞
        keyboard.push([Markup.button.callback('üîô –ù–∞–∑–∞–¥', 'back_to_channels')]);
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
        await ctx.replyWithMarkdown(message, Markup.inlineKeyboard(keyboard));
        
        return ctx.wizard.next();
      }
      
      // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞
      else if (action === 'back' || action === 'back_to_channels') {
        return ctx.scene.leave();
      }
      
      // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∫–∞–Ω–∞–ª–∞ –¥–ª—è –ø–æ—Å—Ç–∏–Ω–≥–∞
      else if (action.startsWith('post_channel_')) {
        const channelId = action.replace('post_channel_', '');
        ctx.session.selectedChannelId = channelId;
        return ctx.scene.enter('posting', { channelId });
      }
      
      // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Å–µ—Ç–∏ –¥–ª—è –ø–æ—Å—Ç–∏–Ω–≥–∞
      else if (action.startsWith('post_network_')) {
        const networkId = action.replace('post_network_', '');
        ctx.session.selectedNetworkId = networkId;
        return ctx.scene.enter('posting', { networkId });
      }
      
      // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∫–∞–Ω–∞–ª–∞ –¥–ª—è –∑–∞–∫—É–ø–∞
      else if (action.startsWith('purchase_channel_')) {
        const channelId = action.replace('purchase_channel_', '');
        ctx.session.selectedChannelId = channelId;
        return ctx.scene.enter('purchases', { channelId });
      }
      
      // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Å–µ—Ç–∏ –¥–ª—è –∑–∞–∫—É–ø–∞
      else if (action.startsWith('purchase_network_')) {
        const networkId = action.replace('purchase_network_', '');
        ctx.session.selectedNetworkId = networkId;
        return ctx.scene.enter('purchases', { networkId });
      }
    }
    
    return ctx.wizard.selectStep(0);
  },
  // –®–∞–≥ 3: –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–∞–Ω–∞–ª–∞
  async (ctx) => {
    if (ctx.session.action === 'add_channel') {
      const channelInput = ctx.message.text.trim();
      
      // –ò–∑–≤–ª–µ–∫–∞–µ–º ID –∫–∞–Ω–∞–ª–∞ –∏–∑ –≤–≤–æ–¥–∞
      let channelId = channelInput;
      
      // –ï—Å–ª–∏ —ç—Ç–æ —Å—Å—ã–ª–∫–∞, –∏–∑–≤–ª–µ–∫–∞–µ–º ID
      if (channelInput.includes('t.me/')) {
        channelId = '@' + channelInput.split('t.me/')[1].split('?')[0];
      }
      
      // –ï—Å–ª–∏ —ç—Ç–æ ID –±–µ–∑ @, –¥–æ–±–∞–≤–ª—è–µ–º @
      if (!channelId.startsWith('@')) {
        channelId = '@' + channelId;
      }
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ —Ç–∞–∫–æ–π –∫–∞–Ω–∞–ª
      const existingChannel = await Channel.findOne({
        userId: ctx.from.id,
        channelId: channelId
      });
      
      if (existingChannel) {
        await ctx.reply('–≠—Ç–æ—Ç –∫–∞–Ω–∞–ª —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –≤–∞—à —Å–ø–∏—Å–æ–∫.');
        return ctx.wizard.selectStep(0);
      }
      
      // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –∫–∞–Ω–∞–ª
      const newChannel = new Channel({
        userId: ctx.from.id,
        channelId: channelId,
        title: channelId, // –í—Ä–µ–º–µ–Ω–Ω–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º ID –∫–∞–∫ –Ω–∞–∑–≤–∞–Ω–∏–µ
        addedAt: new Date()
      });
      
      await newChannel.save();
      
      await ctx.reply(`–ö–∞–Ω–∞–ª ${channelId} —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!`);
      return ctx.wizard.selectStep(0);
    }
    
    return ctx.wizard.selectStep(0);
  },
  // –®–∞–≥ 4: –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–µ—Ç–∏ (–Ω–∞–∑–≤–∞–Ω–∏–µ)
  async (ctx) => {
    if (ctx.session.action === 'create_network_name') {
      const networkName = ctx.message.text.trim();
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ —Å–µ—Ç—å —Å —Ç–∞–∫–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º
      const existingNetwork = await ChannelNetwork.findOne({
        userId: ctx.from.id,
        name: networkName
      });
      
      if (existingNetwork) {
        await ctx.reply('–°–µ—Ç—å —Å —Ç–∞–∫–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ.');
        return ctx.wizard.selectStep(2);
      }
      
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–µ—Ç–∏
      ctx.session.networkName = networkName;
      
      // –ü–æ–ª—É—á–∞–µ–º –∫–∞–Ω–∞–ª—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const channels = await Channel.find({ userId: ctx.from.id });
      
      // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
      let message = `*–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞–Ω–∞–ª—ã –¥–ª—è —Å–µ—Ç–∏ "${networkName}":*\n\n`;
      
      channels.forEach((channel, index) => {
        message += `${index + 1}. ${channel.title || channel.channelId} (${channel.channelId})\n`;
      });
      
      // –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
      const keyboard = [];
      
      channels.forEach((channel, index) => {
        keyboard.push([Markup.button.callback(
          `${channel.title || channel.channelId}`,
          `select_channel_${channel._id}`
        )]);
      });
      
      // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
      keyboard.push([
        Markup.button.callback('‚úÖ –ì–æ—Ç–æ–≤–æ', 'finish_network'),
        Markup.button.callback('‚ùå –û—Ç–º–µ–Ω–∞', 'cancel_network')
      ]);
      
      // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤
      ctx.session.selectedChannels = [];
      
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
      await ctx.replyWithMarkdown(message, Markup.inlineKeyboard(keyboard));
      
      return ctx.wizard.next();
    }
    
    return ctx.wizard.selectStep(0);
  },
  // –®–∞–≥ 5: –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∫–∞–Ω–∞–ª–æ–≤ –¥–ª—è —Å–µ—Ç–∏
  async (ctx) => {
    if (ctx.callbackQuery) {
      const action = ctx.callbackQuery.data;
      
      // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∫–∞–Ω–∞–ª–∞
      if (action.startsWith('select_channel_')) {
        const channelId = action.replace('select_channel_', '');
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤—ã–±—Ä–∞–Ω –ª–∏ —É–∂–µ —ç—Ç–æ—Ç –∫–∞–Ω–∞–ª
        if (ctx.session.selectedChannels.includes(channelId)) {
          // –£–¥–∞–ª—è–µ–º –∫–∞–Ω–∞–ª –∏–∑ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö
          ctx.session.selectedChannels = ctx.session.selectedChannels.filter(id => id !== channelId);
        } else {
          // –î–æ–±–∞–≤–ª—è–µ–º –∫–∞–Ω–∞–ª –≤ –≤—ã–±—Ä–∞–Ω–Ω—ã–µ
          ctx.session.selectedChannels.push(channelId);
        }
        
        // –ü–æ–ª—É—á–∞–µ–º –∫–∞–Ω–∞–ª—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        const channels = await Channel.find({ userId: ctx.from.id });
        
        // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        let message = `*–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞–Ω–∞–ª—ã –¥–ª—è —Å–µ—Ç–∏ "${ctx.session.networkName}":*\n\n`;
        
        channels.forEach((channel, index) => {
          const isSelected = ctx.session.selectedChannels.includes(channel._id.toString());
          message += `${isSelected ? '‚úÖ' : '‚¨úÔ∏è'} ${channel.title || channel.channelId} (${channel.channelId})\n`;
        });
        
        // –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        const keyboard = [];
        
        channels.forEach((channel, index) => {
          const isSelected = ctx.session.selectedChannels.includes(channel._id.toString());
          keyboard.push([Markup.button.callback(
            `${isSelected ? '‚úÖ' : '‚¨úÔ∏è'} ${channel.title || channel.channelId}`,
            `select_channel_${channel._id}`
          )]);
        });
        
        // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        keyboard.push([
          Markup.button.callback('‚úÖ –ì–æ—Ç–æ–≤–æ', 'finish_network'),
          Markup.button.callback('‚ùå –û—Ç–º–µ–Ω–∞', 'cancel_network')
        ]);
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
        await ctx.editMessageText(message, {
          parse_mode: 'Markdown',
          reply_markup: Markup.inlineKeyboard(keyboard).reply_markup
        });
        
        return ctx.wizard.selectStep(4);
      }
      
      // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Å–æ–∑–¥–∞–Ω–∏—è —Å–µ—Ç–∏
      else if (action === 'finish_network') {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤—ã–±—Ä–∞–Ω—ã –ª–∏ –∫–∞–Ω–∞–ª—ã
        if (ctx.session.selectedChannels.length < 2) {
          await ctx.reply('–î–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å–µ—Ç–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤—ã–±—Ä–∞—Ç—å –∫–∞–∫ –º–∏–Ω–∏–º—É–º 2 –∫–∞–Ω–∞–ª–∞.');
          return ctx.wizard.selectStep(4);
        }
        
        // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é —Å–µ—Ç—å
        const newNetwork = new ChannelNetwork({
          userId: ctx.from.id,
          name: ctx.session.networkName,
          channels: ctx.session.selectedChannels,
          createdAt: new Date()
        });
        
        await newNetwork.save();
        
        await ctx.reply(`–°–µ—Ç—å "${ctx.session.networkName}" —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞!`);
        return ctx.wizard.selectStep(0);
      }
      
      // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–º–µ–Ω—ã —Å–æ–∑–¥–∞–Ω–∏—è —Å–µ—Ç–∏
      else if (action === 'cancel_network') {
        await ctx.reply('–°–æ–∑–¥–∞–Ω–∏–µ —Å–µ—Ç–∏ –æ—Ç–º–µ–Ω–µ–Ω–æ.');
        return ctx.wizard.selectStep(0);
      }
    }
    
    return ctx.wizard.selectStep(0);
  }
);

// –û–±—Ä–∞–±–æ—Ç–∫–∞ callback-–∑–∞–ø—Ä–æ—Å–æ–≤
channelsScene.action(/post_channel_.*/, (ctx) => {
  ctx.answerCbQuery();
  return ctx.wizard.next();
});

channelsScene.action(/post_network_.*/, (ctx) => {
  ctx.answerCbQuery();
  return ctx.wizard.next();
});

channelsScene.action(/purchase_channel_.*/, (ctx) => {
  ctx.answerCbQuery();
  return ctx.wizard.next();
});

channelsScene.action(/purchase_network_.*/, (ctx) => {
  ctx.answerCbQuery();
  return ctx.wizard.next();
});

channelsScene.action(/select_channel_.*/, (ctx) => {
  ctx.answerCbQuery();
  return ctx.wizard.selectStep(4);
});

channelsScene.action('finish_network', (ctx) => {
  ctx.answerCbQuery();
  return ctx.wizard.selectStep(4);
});

channelsScene.action('cancel_network', (ctx) => {
  ctx.answerCbQuery();
  return ctx.wizard.selectStep(0);
});

channelsScene.action('back_to_channels', (ctx) => {
  ctx.answerCbQuery();
  return ctx.wizard.selectStep(0);
});

module.exports = channelsScene; 